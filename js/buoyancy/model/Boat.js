// Copyright 2019-2020, University of Colorado Boulder

/**
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */
define( require => {
  'use strict';

  // modules
  const Bounds3 = require( 'DOT/Bounds3' );
  const Color = require( 'SCENERY/util/Color' );
  const Cubic = require( 'KITE/segments/Cubic' );
  const densityBuoyancyCommon = require( 'DENSITY_BUOYANCY_COMMON/densityBuoyancyCommon' );
  const InterpolatedProperty = require( 'DENSITY_BUOYANCY_COMMON/common/model/InterpolatedProperty' );
  const Line = require( 'KITE/segments/Line' );
  const Mass = require( 'DENSITY_BUOYANCY_COMMON/common/model/Mass' );
  const merge = require( 'PHET_CORE/merge' );
  const NumberProperty = require( 'AXON/NumberProperty' );
  const Property = require( 'AXON/Property' );
  const Shape = require( 'KITE/Shape' );
  const ThreeUtils = require( 'MOBIUS/ThreeUtils' );
  const Utils = require( 'DOT/Utils' );
  const Vector2 = require( 'DOT/Vector2' );
  const Vector3 = require( 'DOT/Vector3' );

  // constants
  const OUTSIDE = 3;
  const BOAT_HEIGHT = 50;

  // NOTE: machine generated by copy( phet.densityBuoyancyCommon.Boat.computeBoatData() );
  // If any parameters about the bottle shape changes, this should be recomputed.
  const ONE_LITER_SCALE_MULTIPLIER = 0.0012334765488263805;
  const DESIGN_CENTROID = new Vector3( 133.56338177804366, -30.519407005581154, 0 );
  //const DESIGN_DISPLACED_VOLUME = 532852.8697157892;
  const DESIGN_ACTUAL_VOLUME = 81410.06188763794;
  //const ONE_LITER_HEIGHT = 0.061673827441319024;
  const ONE_LITER_DISPLACED_AREAS = [ 0.012739906050911763, 0.01273991541157058, 0.012739943493568611, 0.012739990296970618, 0.012740055821884538, 0.012740140068461489, 0.012740243036895745, 0.012740364727424769, 0.012740505140329194, 0.012740664275932822, 0.012740842134602639, 0.01274103871674881, 0.012741254022824652, 0.012741488053326673, 0.012741740808794554, 0.012742012289811148, 0.012742302497002476, 0.012742611431037755, 0.012742939092629349, 0.012743285482532816, 0.01274365060154687, 0.01274403445051342, 0.012744437030317536, 0.012744858341887462, 0.01274529838619463, 0.01274575716425363, 0.01274623467712223, 0.012746730925901385, 0.012747245911735202, 0.012747779635810983, 0.012748332099359194, 0.012748903303653478, 0.012749493250010646, 0.012750101939790702, 0.012750729374396795, 0.012751375555275278, 0.012752040483915657, 0.012752724161850623, 0.01275342659065604, 0.012754147771950943, 0.012754887707397543, 0.012755646398701226, 0.012756423847610552, 0.012757220055917253, 0.012758035025456244, 0.012758868758105597, 0.012759721255786581, 0.012760592520463621, 0.012761482554144322, 0.012762391358879462, 0.012763318936763008, 0.012764265289932073, 0.012765230420566967, 0.01276621433089117, 0.012767217023171334, 0.012768238499717274, 0.012769278762882, 0.012770337815061683, 0.012771415658695676, 0.012772512296266502, 0.012773627730299848, 0.012774761963364599, 0.012775914998072797, 0.012777086837079663, 0.012778277483083588, 0.012779486938826141, 0.012780715207092072, 0.012781962290709296, 0.0127832281925489, 0.012784512915525154, 0.012785816462595502, 0.012787138836760553, 0.012788480041064098, 0.012789840078593108, 0.012791218952477711, 0.012792616665891229, 0.012794033222050133, 0.0127954686242141, 0.012796922875685957, 0.012798395979811717, 0.012799887939980563, 0.01280139875962485, 0.012802928442220115, 0.012804476991285067, 0.012806044410381572, 0.012807630703114706, 0.01280923587313269, 0.012810859924126923, 0.012812502859831992, 0.012814164684025643, 0.012815845400528804, 0.01281754501320558, 0.012819263525963244, 0.012821000942752249, 0.012822757267566213, 0.012824532504441944, 0.012826326657459409, 0.01282813973074175, 0.0128299717284553, 0.01283182265480955, 0.012833692514057166, 0.012835581310493996, 0.01283748904845906, 0.012839415732334556, 0.012841361366545838, 0.012843325955561457, 0.01284530950389313, 0.012847312016095744, 0.012849333496767364, 0.012851373950549234, 0.012853433382125756, 0.012855511796224529, 0.01285760919761631, 0.012859725591115034, 0.01286186098157782, 0.012864015373904946, 0.01286618877303987, 0.012868381183969227, 0.012870592611722825, 0.01287282306137365, 0.012875072538037853, 0.01287734104687477, 0.012879628593086903, 0.01288193518191993, 0.012884260818662707, 0.012886605508647266, 0.012888969257248804, 0.012891352069885694, 0.012893753952019499, 0.012896174909154935, 0.012898614946839906, 0.012901074070665486, 0.012903552286265918, 0.012906049599318629, 0.012908566015544218, 0.012911101540706455, 0.012913656180612281, 0.01291622994111182, 0.012918822828098371, 0.01292143484750839, 0.012924066005321535, 0.012926716307560607, 0.012929385760291609, 0.012932074369623703, 0.012934782141709237, 0.012937509082743713, 0.012940255198965826, 0.012943020496657435, 0.012945804982143585, 0.01294860866179248, 0.012951431542015515, 0.01295427362926724, 0.012957134930045395, 0.01296001545089089, 0.01296291519838781, 0.012965834179163407, 0.012968772399888112, 0.012971729867275546, 0.012974706588082465, 0.012977702569108846, 0.01298071781719781, 0.012983752339235655, 0.01298680614215187, 0.012989879232919095, 0.012992971618553168, 0.012996083306113081, 0.012999214302701016, 0.013002364615462315, 0.013005534251585514, 0.013008723218302296, 0.013011931522887543, 0.013015159172659298, 0.013018406174978785, 0.013021672537250395, 0.013024958266921703, 0.013028263371483452, 0.013031587858469551, 0.013034931735457105, 0.013038295010066375, 0.013041677689960807, 0.01304507978284701, 0.01304850129647478, 0.013051942238637072, 0.013055402617170033, 0.013058882439952978, 0.01306238171490838, 0.013065900450001921, 0.01306943865324242, 0.013072996332681896, 0.013076573496415524, 0.013080170152581675, 0.013083786309361875, 0.01308742197498083, 0.013091077157706427, 0.013094751865849718, 0.013098446107764937, 0.013102159891849485, 0.01310589322654394, 0.013109646120332058, 0.01311341858174077, 0.013117210619340168, 0.013121022241743538, 0.01312485345760732, 0.01312870427563116, 0.013132574704557833, 0.013136464753173325, 0.013140374430306776, 0.01314430374483052, 0.013148252705660045, 0.013152221321754021, 0.013156209602114294, 0.01316021755578589, 0.013164245191856994, 0.01316829251945898, 0.013172359547766386, 0.013176446285996934, 0.01318055274341151, 0.01318467892931418, 0.013188824853052183, 0.013192990524015935, 0.013197175951639026, 0.01320138114539822, 0.013205606114813443, 0.013209850869447816, 0.013214115418907624, 0.013218399772842322, 0.01322270394094455, 0.013227027932950107, 0.01323137175863799, 0.01323573542783034, 0.013240118950392505, 0.013244522336232979, 0.013248945595303445, 0.013253388737598761, 0.013257851773156946, 0.013262334712059213, 0.013266837564429939, 0.013271360340436668, 0.013275903050290134, 0.01328046570424423, 0.01328504831259604, 0.013289650885685799, 0.013294273433896945, 0.013298915967656066, 0.013303578497432942, 0.013308261033740509, 0.013312963587134893, 0.013317686168215387, 0.013322428787624463, 0.013327191456047766, 0.01333197418421411, 0.013336776982895484, 0.013341599862907057, 0.013346442835107176, 0.013351305910397345, 0.013356189099722264, 0.013361092414069792, 0.013366015864470964, 0.013370959461999997, 0.013375923217774276, 0.013380907142954361, 0.013385911248743986, 0.013390935546390065, 0.01339598004718268, 0.013401044762455088, 0.01340612970358372, 0.013411234881988187, 0.01341636030913127, 0.013421505996518915, 0.013426671955700263, 0.013431858198267617, 0.013437064735856454, 0.013442291580145423, 0.013447538742856351, 0.013452806235754245, 0.013458094070647278, 0.013463402259386798, 0.013468730813867331, 0.013474079746026572, 0.01347944906784541, 0.013484838791347866, 0.013490248928601184, 0.013495679491715748, 0.013501130492845131, 0.013506601944186078, 0.013512093857978509, 0.013517606246505517, 0.013523139122093365, 0.013528692497111501, 0.013534266383972536, 0.01353986079513227, 0.013545475743089654, 0.013551111240386833, 0.013556767299609123, 0.01356244393338501, 0.013568141154386155, 0.013573858975327398, 0.013579597408966746, 0.01358535646810538, 0.013591136165587672, 0.013596936514301144, 0.013602757527176506, 0.013608599217187642, 0.013614461597351609, 0.013620344680728638, 0.013626248480422131, 0.013632173009578676, 0.013638118281388016, 0.013644084309083086, 0.013650071105939987, 0.013656078685277991, 0.013662107060459555, 0.013668156244890303, 0.013674226252019035, 0.013680317095337726, 0.01368642878838152, 0.013692561344728743, 0.013698714778000895, 0.013704889101862638, 0.013711084330021826, 0.013717300476229476, 0.013723537554279784, 0.013729795578010115, 0.013736074561301014, 0.013742374518076202, 0.01374869546230256, 0.013755037407990165, 0.01376140036919226, 0.013767784360005237, 0.013774189394568712, 0.013780615487065431, 0.01378706265172134, 0.013793530902805544, 0.013800020254630334, 0.01380653072155117, 0.013813062317966683, 0.01381961505831869, 0.013826188957092164, 0.013832784028815265, 0.013839400288059333, 0.013846037749438865, 0.013852696427611551, 0.013859376337278233, 0.013866077493182949, 0.013872799910112907, 0.013879543602898474, 0.013886308586413206, 0.013893094875573834, 0.013899902485340253, 0.013906731430715545, 0.013913581726745955, 0.013920453388520897, 0.013927346431172986, 0.013934260869877986, 0.013941196719854847, 0.013948153996365687, 0.013955132714715804, 0.013962132890253665, 0.013969154538370913, 0.01397619767450237, 0.013983262314126027, 0.01399034847276305, 0.013997456165977779, 0.014004585409377738, 0.014011736218613608, 0.014018908609379252, 0.014026102597411718, 0.01403331819849121, 0.01404055542844112, 0.01404781430312801, 0.014055094838461603, 0.01406239705039483, 0.01406972095492376, 0.014077066568087665, 0.014084433905968963, 0.01409182298469327, 0.014099233820429368, 0.014106666429389209, 0.01411412082782792, 0.01412159703204382, 0.014129095058378371, 0.014136614923216244, 0.014144156642985248, 0.014151720234156399, 0.014159305713243867, 0.014166913096805003, 0.014174542401440329, 0.014182193643793556, 0.014189866840551546, 0.014197562008444343, 0.014205279164245181, 0.014213018324770448, 0.014220779506879723, 0.014228562727475752, 0.014236368003504432, 0.014244195351954888, 0.014252044789859369, 0.01425991633429332, 0.014267810002375361, 0.014275725811267277, 0.01428366377817404, 0.014291623920343792, 0.01429960625506784, 0.014307610799680676, 0.014315637571559956, 0.014323686588126527, 0.01433175786684439, 0.014339851425220745, 0.01434796728080593, 0.014356105451193502, 0.014364265954020156, 0.014372448806965771, 0.01438065402775342, 0.014388881634149324, 0.014397131643962889, 0.014405404075046696, 0.014413698945296496, 0.014422016272651229, 0.014430356075092986, 0.014438718370647053, 0.014447103177381869, 0.014455510513409072, 0.01446394039688346, 0.01447239284600301, 0.014480867879008855, 0.014489365514185342, 0.014497885769859947, 0.014506428664403366, 0.014514994216229418, 0.014523582443795134, 0.014532193365600724, 0.014540827000189535, 0.014549483366148124, 0.0145581624821062, 0.01456686436673666, 0.014575589038755575, 0.014584336516922177, 0.014593106820038886, 0.014601899966951288, 0.01461071597654815, 0.014619554867761406, 0.014628416659566174, 0.014637301370980732, 0.014646209021066555, 0.014655139628928265, 0.014664093213713677, 0.014673069794613773, 0.014682069390862713, 0.01469109202173783, 0.014700137706559627, 0.014709206464691791, 0.01471829831554117, 0.014727413278557802, 0.014736551373234886, 0.0147457126191088, 0.014754897035759103, 0.014764104642808506, 0.014773335459922937, 0.014782589506811447, 0.0147918668032263, 0.01480116736896291, 0.014810491223859882, 0.014819838387798991, 0.014829208880705182, 0.014838602722546572, 0.014848019933334467, 0.01485746053312333, 0.014866924542010804, 0.014876411980137713, 0.014885922867688044, 0.014895457224888973, 0.01490501507201083, 0.014914596429367145, 0.014924201317314596, 0.01493382975625306, 0.014943481766625568, 0.014953157368918328, 0.014962856583660741, 0.01497257943142536, 0.01498232593282793, 0.014992096108527348, 0.01500188997922571, 0.01501170756566827, 0.015021548888643465, 0.0150314139689829, 0.015041302827561361, 0.015051215485296797, 0.015061151963150353, 0.015071112282126315, 0.015081096463272178, 0.01509110452767859, 0.015101136496479378, 0.015111192390851546, 0.015121272232015275, 0.015131376041233909, 0.015141503839813976, 0.015151655649105174, 0.015161831490500387, 0.015172031385435646, 0.015182255355390183, 0.015192503421886406, 0.015202775606489864, 0.015213071930809329, 0.015223392416496692, 0.015233737085247065, 0.01524410595879871, 0.015254499058933077, 0.01526491640747478, 0.015275358026291604, 0.01528582393729452, 0.01529631416243768, 0.015306828723718378, 0.01531736764317711, 0.015327930942897548, 0.01533851864500652, 0.015349130771674036, 0.01535976734511329, 0.015370428387580636, 0.015381113921375613, 0.015391823968840927, 0.015402558552362463, 0.01541331769436928, 0.015424101417333606, 0.015434909743770847, 0.015445742696239592, 0.015456600297341588, 0.015467482569721766, 0.015478389536068228, 0.015489321219112253, 0.015500277641628295, 0.01551125882643398, 0.015522264796390108, 0.015533295574400655, 0.015544351183412769, 0.015555431646416778, 0.015566536986446168, 0.015577667226577628, 0.015588822389930996, 0.015600002499669287, 0.01561120757899871, 0.015622437651168624, 0.015633692739471572, 0.015644972867243288, 0.01565627805786265, 0.01566760833475173, 0.015678963721375762, 0.01569034424124317, 0.015701749917905544, 0.01571318077495764, 0.01572463683603741, 0.015736118124825952, 0.01574762466504756, 0.0157591564804697, 0.015770713594903004, 0.015782296032201278, 0.015793903816261508, 0.015805536971023857, 0.015817195520471655, 0.015828879488631407, 0.015840588899572804, 0.015852323777408698, 0.01586408414629511, 0.01587587003043125, 0.015887681454059506, 0.01589951844146542, 0.01591138101697772, 0.015923269204968317, 0.015935183029852282, 0.015947122516087858, 0.015959087688176485, 0.01597107857066275, 0.015983095188134434, 0.01599513756522248, 0.01600720572660101, 0.016019299696987326, 0.01603141950114189, 0.016043565163868356, 0.016055736710013535, 0.016067934164467428, 0.0160801575521632, 0.01609240689807719, 0.016104682227228922, 0.016116983564681088, 0.01612931093553954, 0.016141664364953328, 0.01615404387811466, 0.016166449500258934, 0.01617888125666471, 0.016191339172653713, 0.01620382327359087, 0.016216333584884255, 0.01622887013198513, 0.016241432940387938, 0.016254022035630276, 0.016266637443292938, 0.01627927918899986, 0.016291947298418204, 0.01630464179725825, 0.016317362711273493, 0.016330110066260586, 0.016342883888059344, 0.016355684202552786, 0.016368511035667083, 0.016381364413371586, 0.01639424436167882, 0.016407150906644484, 0.016420084074367465, 0.016433043890989797, 0.01644603038269671, 0.016459043575716602, 0.016472083496321042, 0.016485150170824775, 0.01649824362558573, 0.016511363887004988, 0.01652451098152683, 0.016537684935638695, 0.0165508857758712, 0.016564113528798136, 0.016577368221036476, 0.016590649879246355, 0.016603958530131083, 0.016617294200437165, 0.016630656916954253, 0.01664404670651519, 0.016657463595995976, 0.01667090761231581, 0.016684378782437052, 0.016697877133365242, 0.016711402692149074, 0.01672495548588044, 0.016738535541694403, 0.01675214288676919, 0.01676577754832621, 0.016779439553630045, 0.01679312892998844, 0.016806845704752344, 0.016820589905315847, 0.01683436155911623, 0.01684816069363395, 0.01686198733639263, 0.016875841514959074, 0.01688972325694325, 0.016903632589998312, 0.016917569541820596, 0.016931534140149584, 0.01694552641276796, 0.016959546387501565, 0.016973594092219425, 0.01698766955483373, 0.017001772803299856, 0.017015903865616345, 0.017030062769824914, 0.017044249544010456, 0.01705846421630105, 0.017072706814867923, 0.017086977367925495, 0.017101275903731363, 0.017115602450586288, 0.017129957036834204, 0.017144339690862223, 0.01715875044110065, 0.017173189316022925, 0.0171876563441457, 0.017202151554028784, 0.017216674974275148, 0.017231226633530963, 0.017245806560485567, 0.01726041478387146, 0.017275051332464327, 0.01728971623508302, 0.01730440952058957, 0.017319131217889194, 0.01733388135593026, 0.017348659963704327, 0.01736346707024612, 0.017378302704633544, 0.017393166895987675, 0.017408059673472757, 0.017422981066296226, 0.017437931103708677, 0.01745290981500389, 0.0174679172295188, 0.017482953376633543, 0.017498018285771407, 0.017513111986398867, 0.017528234508025573, 0.01754338588020434, 0.01755856613253116, 0.017573775294645207, 0.017589013396228818, 0.01760428046700751, 0.017619576536749986, 0.017634901635268103, 0.017650255792416907, 0.017665639038094594, 0.017681051402242576, 0.017696492914845405, 0.017711963605930813, 0.01772746350556973, 0.01774299264387622, 0.01775855105100756, 0.017774138757164177, 0.017789755792589686, 0.017805402187570863, 0.01782107797243767, 0.017836783177563237, 0.01785251783336387, 0.01786828197029905, 0.017884075618871433, 0.017899898809626846, 0.017915751573154295, 0.017931633940085963, 0.01794754594109719, 0.01796348760690651, 0.017979458968275623, 0.017995460056009407, 0.01801149090095591, 0.018027551534006342, 0.018043641986095125, 0.018059762288199815, 0.018075912471341164, 0.018092092566583094, 0.018108302605032694, 0.018124542617840238, 0.018140812636199172, 0.018157112691346112, 0.018173442814560854, 0.018189803037166365, 0.018206193390528775, 0.018222613906057412, 0.01823906461520476, 0.01825554554946649, 0.01827205674038143, 0.0182885982195316, 0.018305170018542188, 0.01832177216908155, 0.01833840470286123, 0.018355067651635925, 0.018371761047203537, 0.01838848492140511, 0.01840523930612488, 0.018422024233290264, 0.018438839734871825, 0.018455685842883335, 0.01847256258938172, 0.018489470006467085, 0.018506408126282705, 0.01852337698101504, 0.01854037660289371, 0.018557407024191525, 0.018574468277224455, 0.01859156039435166, 0.018608683407975446, 0.01862583735054133, 0.01864302225453798, 0.018660238152497236, 0.01867748507699414, 0.018694763060646866, 0.01871207213611679, 0.018729412336108472, 0.018746783693369618, 0.018764186240691125, 0.018781620010907055, 0.018799085036894668, 0.01881658135157436, 0.018834108987909725, 0.01885166797890754, 0.018869258357617737, 0.018886880157133433, 0.01890453341059092, 0.01892221815116964, 0.01893993441209226, 0.018957682226624573, 0.01897546162807557, 0.0189932726497974, 0.019011115325185412, 0.01902898968767811, 0.019046895770757164, 0.019064833607947456, 0.01908280323281699, 0.019100804678977, 0.01911883798008184, 0.01913690316982908, 0.019155000281959447, 0.019173129350256838, 0.019191290408548337, 0.01920948349070419, 0.019227708630637826, 0.019245965862305838, 0.019264255219708013, 0.019282576736887297, 0.019300930447929812, 0.019319316386964845, 0.01933773458816488, 0.01935618508574556, 0.019374667913965707, 0.01939318310712732, 0.01941173069957555, 0.019430310725698764, 0.019448923219928457, 0.01946756821673934, 0.019486245750649275, 0.01950495585621929, 0.019523698568053617, 0.01954247392079964, 0.019561281949147913, 0.019580122687832185, 0.019598996171629364, 0.019617902435359536, 0.019636841513885967, 0.01965581344211509, 0.01967481825499651, 0.019693855987523014, 0.01971292667473056, 0.019732030351698286, 0.019751167053548492, 0.019770336815446658, 0.019789539672601445, 0.019808775660264677, 0.019828044813731356, 0.019847347168339677, 0.01986668275947098, 0.019886051622549784, 0.019905453793043815, 0.01992488930646392, 0.01994435819836417, 0.019963860504341773, 0.019983396260037145, 0.020002965501133847, 0.020022568263358624, 0.02004220458248141, 0.020061874494315294, 0.02008157803471654, 0.020101315239584607, 0.020121086144862105, 0.02014089078653482, 0.020160729200631736, 0.020180601423224982, 0.020200507490429877, 0.02022044743840492, 0.02024042130335176, 0.020260429121515246, 0.020280470929183392, 0.020300546762687385, 0.020320656658401576, 0.020340800652743525, 0.020360978782173918, 0.020381191083196654, 0.020401437592358785, 0.020421718346250558, 0.02044203338150536, 0.020462382734799795, 0.020482766442853604, 0.02050318454242972, 0.020523637070334257, 0.020544124063416488, 0.02056464555856886, 0.02058520159272701, 0.02060579220286975, 0.02062641742601904, 0.020647077299240035, 0.02066777185964107, 0.020688501144373622, 0.020709265190632393, 0.020730064035655207, 0.020750897716723112, 0.020771766271160282, 0.0207926697363341, 0.020813608149655112, 0.020834581548577025, 0.020855589970596757, 0.02087663345325435, 0.02089771203413307, 0.020918825750859318, 0.0209399746411027, 0.020961158742575963, 0.02098237809303506, 0.0210036327302791, 0.02102492269215038, 0.02104624801653436, 0.02106760874135967, 0.02108900490459813, 0.02111043654426472, 0.021131903698417605, 0.02115340640515812, 0.02117494470263077, 0.021196518629023244, 0.0212181282225664, 0.021239773521534253, 0.02126145456424403, 0.021283171389056107, 0.02130492403437403, 0.02132671253864453, 0.021348536940357522, 0.02137039727804608, 0.021392293590286448, 0.021414225915698054, 0.021436194292943505, 0.021458198760728575, 0.021480239357802213, 0.021502316122956538, 0.021524429095026856, 0.021546578312891626, 0.021568763815472507, 0.021590985641734325, 0.021613243830685056, 0.02163553842137589, 0.021657869452901157, 0.021680236964398383, 0.021702640995048244, 0.021725081584074636, 0.02174755877074458, 0.021770072594368296, 0.021792623094299177, 0.021815210309933778, 0.021837834280711847, 0.021860495046116295, 0.0218831926456732, 0.021905927118951847, 0.021928698505564646, 0.02195150684516722, 0.02197435217745835, 0.02199723454218, 0.022020153979117288, 0.022043110528098542, 0.02206610422899523, 0.022089135121722007, 0.022112203246236712, 0.02213530864254035, 0.022158451350677087, 0.02218163141073429, 0.022204848862842484, 0.02222810374717536, 0.02225139610394981, 0.022274725973425873, 0.02229809339590678, 0.022321498411738923, 0.022344941061311883, 0.022368421385058422, 0.022391939423454417, 0.022415495217019007, 0.02243908880631445, 0.022462720231946186, 0.022486389534562848, 0.022510096754856206, 0.02253384193356125, 0.022557625111456113, 0.022581446329362112, 0.022605305628143745, 0.022629203048708663, 0.022653138632007717, 0.022677112419034917, 0.022701124450827444, 0.02272517476846568, 0.022749263413073154, 0.022773390425816564, 0.02279755584790581, 0.022821759720593943, 0.022846002085177206, 0.022870282982995004, 0.022894602455429906, 0.0229189605439077, 0.02294335728989728, 0.022967792734910786, 0.022992266920503473, 0.02301677988827381, 0.023041331679863414, 0.023065922336957104, 0.02309055190128285, 0.02311522041461179, 0.02313992791875827, 0.023164674455579782, 0.023189460066976992, 0.023214284794893767, 0.02323914868131712, 0.023264051768277238, 0.023288994097847515, 0.023313975712144483, 0.023338996653327875, 0.023364056963600558, 0.023389156685208627, 0.023414295860441327, 0.023439474531631057, 0.023464692741153426, 0.023489950531427186, 0.023515247944914296, 0.023540585024119844, 0.023565961811592148, 0.023591378349922656, 0.023616834681746007, 0.02364233084974002, 0.023667866896625672, 0.023693442865167127, 0.023719058798171728, 0.023744714738489978, 0.02377041072901556, 0.023796146812685322, 0.023821923032479327, 0.023847739431420757, 0.023873596052575993 ];
  const ONE_LITER_DISPLACED_VOLUMES = [ 7.857187674025482e-7, 0.000001571438112112753, 0.0000023571591887472586, 0.000003142883151926703, 0.000003928611156278382, 0.00000471434435643891, 0.0000055000839070568844, 0.000006285830962795547, 0.000007071586678335448, 0.000007857352208377107, 0.000008643128707643678, 0.000009428917330883609, 0.000010214719232873309, 0.000011000535568419806, 0.000011786367492363414, 0.000012572216159580392, 0.000013358082724985612, 0.000014143968343535214, 0.000014929874170229275, 0.00001571580136011447, 0.000016501751068286733, 0.000017287724449893923, 0.00001807372266013848, 0.000018859746854280104, 0.000019645798187638393, 0.000020431877815595527, 0.00002121798689359892, 0.000022004126577163886, 0.000022790298021876302, 0.00002357650238339527, 0.000024362740817455776, 0.000025149014479871362, 0.00002593532452653678, 0.000026721672113430656, 0.000027508058396618163, 0.000028294484532253665, 0.000029080951676583393, 0.000029867460985948108, 0.00003065401361678576, 0.000031440610725634145, 0.00003222725346913358, 0.00003301394300402956, 0.00003380068048717542, 0.00003458746707553499, 0.00003537430392618529, 0.00003616119219631913, 0.000036948133043247845, 0.00003773512762440391, 0.00003852217709734361, 0.00003930928261974972, 0.00004009644534943416, 0.000040883666444340646, 0.00004167094706254737, 0.00004245828836226964, 0.00004324569150186258, 0.00004403315763982375, 0.000044820687934795834, 0.0000456082835455693, 0.00004639594563108506, 0.000047183675350437126, 0.00004797147386287529, 0.00004875934232780776, 0.00004954728190480386, 0.00005033529375359666, 0.00005112337903408565, 0.000051911538906339406, 0.000052699774530598245, 0.0000534880870672769, 0.00005427647767696716, 0.000055064947520440574, 0.000055853497758651065, 0.00005664212955273762, 0.00005743084406402696, 0.00005821964245403618, 0.00005900852588447542, 0.00005979749551725054, 0.000060586552514465765, 0.00006137569803842635, 0.00006216493325164127, 0.00006295425931682585, 0.00006374367739690443, 0.00006453318865501305, 0.00006532279425450209, 0.00006611249535893895, 0.00006690229313211068, 0.00006769218873802671, 0.00006848218334092145, 0.00006927227810525696, 0.00007006247419572565, 0.00007085277277725289, 0.00007164317501499973, 0.00007243368207436551, 0.00007322429512099057, 0.00007401501532075886, 0.00007480584383980066, 0.0000755967818444952, 0.00007638783050147335, 0.00007717899097762025, 0.000077970264440078, 0.00007876165205624834, 0.00007955315499379525, 0.00008034477442064767, 0.00008113651150500216, 0.00008192836741532552, 0.00008272034332035749, 0.0000835124403891134, 0.00008430465979088684, 0.00008509700269525231, 0.0000858894702720679, 0.00008668206369147794, 0.00008747478412391564, 0.00008826763274010583, 0.00008906061071106754, 0.00008985371920811668, 0.00009064695940286874, 0.00009144033246724143, 0.00009223383957345733, 0.00009302748189404656, 0.00009382126060184948, 0.00009461517687001927, 0.00009540923187202468, 0.00009620342678165265, 0.00009699776277301097, 0.00009779224102053095, 0.0000985868626989701, 0.00009938162898341477, 0.0001001765410492828, 0.00010097160007232621, 0.00010176680722863389, 0.00010256216369463418, 0.00010335767064709761, 0.0001041533292631395, 0.00010494914072022271, 0.0001057451061961602, 0.00010654122686911774, 0.00010733750391761661, 0.00010813393852053622, 0.00010893053185711675, 0.00010972728510696187, 0.00011052419945004135, 0.00011132127606669377, 0.00011211851613762915, 0.00011291592084393162, 0.0001137134913670621, 0.00011451122888886092, 0.00011530913459155055, 0.00011610720965773821, 0.00011690545527041851, 0.0001177038726129762, 0.00011850246286918876, 0.00011930122722322908, 0.00012010016685966814, 0.00012089928296347765, 0.00012169857672003272, 0.00012249804931511454, 0.00012329770193491302, 0.00012409753576602946, 0.00012489755199547923, 0.00012569775181069437, 0.00012649813639952637, 0.00012729870695024867, 0.0001280994646515595, 0.00012890041069258445, 0.00012970154626287908, 0.00013050287255243168, 0.00013130439075166592, 0.0001321061020514434, 0.00013290800764306654, 0.00013371010871828098, 0.00013451240646927844, 0.00013531490208869927, 0.00013611759676963517, 0.00013692049170563181, 0.00013772358809069156, 0.00013852688711927608, 0.00013933038998630902, 0.00014013409788717865, 0.0001409380120177406, 0.00014174213357432045, 0.0001425464637537164, 0.00014335100375320196, 0.00014415575477052858, 0.00014496071800392833, 0.00014576589465211662, 0.00014657128591429475, 0.00014737689299015264, 0.00014818271707987151, 0.00014898875938412648, 0.0001497950211040893, 0.00015060150344143095, 0.00015140820759832437, 0.00015221513477744705, 0.00015302228618198374, 0.00015382966301562913, 0.00015463726648259045, 0.00015544509778759016, 0.00015625315813586865, 0.00015706144873318687, 0.000157869970785829, 0.00015867872550060505, 0.00015948771408485368, 0.0001602969377464447, 0.00016110639769378177, 0.00016191609513580514, 0.00016272603128199427, 0.00016353620734237045, 0.00016434662452749951, 0.00016515728404849447, 0.0001659681871170182, 0.0001667793349452861, 0.0001675907287460687, 0.00016840236973269447, 0.00016921425911905227, 0.0001700263981195942, 0.00017083878794933813, 0.00017165142982387052, 0.0001724643249593489, 0.0001732774745725046, 0.00017409087988064554, 0.00017490454210165865, 0.00017571846245401277, 0.00017653264215676114, 0.00017734708242954418, 0.00017816178449259207, 0.00017897674956672744, 0.00017979197887336808, 0.00018060747363452955, 0.00018142323507282782, 0.000182239264411482, 0.00018305556287431695, 0.000183872131685766, 0.00018468897207087352, 0.0001855060852552977, 0.0001863234724653131, 0.00018714113492781335, 0.0001879590738703139, 0.00018877729052095457, 0.00018959578610850222, 0.0001904145618623535, 0.0001912336190125374, 0.00019205295878971804, 0.0001928725824251972, 0.00019369249115091708, 0.0001945126861994629, 0.00019533316880406562, 0.00019615394019860456, 0.00019697500161761008, 0.00019779635429626624, 0.00019861799947041344, 0.00019943993837655114, 0.0002002621722518405, 0.00020108470233410694, 0.000201907529861843, 0.0002027306560742108, 0.0002035540822110449, 0.0002043778095128548, 0.00020520183922082767, 0.000206026172576831, 0.00020685081082341526, 0.0002076757552038166, 0.00020850100696195948, 0.00020932656734245933, 0.0002101524375906252, 0.0002109786189524625, 0.00021180511267467555, 0.0002126319200046703, 0.00021345904219055706, 0.00021428648048115297, 0.0002151142361259849, 0.00021594231037529196, 0.0002167707044800282, 0.00021759941969186523, 0.00021842845726319503, 0.0002192578184471324, 0.0002200875044975178, 0.00022091751666891994, 0.00022174785621663842, 0.00022257852439670645, 0.00022340952246589345, 0.0002242408516817078, 0.0002250725133023994, 0.0002259045085869624, 0.00022673683879513782, 0.0002275695051874163, 0.0002284025090250406, 0.00022923585157000846, 0.00023006953408507514, 0.00023090355783375607, 0.0002317379240803296, 0.00023257263408983956, 0.00023340768912809802, 0.0002342430904616879, 0.00023507883935796562, 0.00023591493708506383, 0.000236751384911894, 0.00023758818410814906, 0.0002384253359443062, 0.0002392628416916294, 0.00024010070262217215, 0.00024093892000878007, 0.00024177749512509366, 0.00024261642924555086, 0.00024345572364538976, 0.0002442953796006513, 0.0002451353983881819, 0.00024597578128563596, 0.0002468165295714789, 0.00024765764452498956, 0.00024849912742626275, 0.0002493409795562122, 0.00025018320219657314, 0.00025102579662990477, 0.0002518687641395931, 0.00025271210600985366, 0.000253555823525734, 0.00025439991797311656, 0.00025524439063872103, 0.0002560892428101073, 0.000256934475775678, 0.0002577800908246811, 0.0002586260892472128, 0.00025947247233421987, 0.00026031924137750263, 0.00026116639766971743, 0.00026201394250437924, 0.0002628618771758645, 0.0002637102029794138, 0.00026455892121113425, 0.0002654080331680025, 0.0002662575401478672, 0.00026710744344945163, 0.00026795774437235654, 0.00026880844421706265, 0.0002696595442849334, 0.00027051104587821765, 0.0002713629503000521, 0.0002722152588544643, 0.00027306797284637507, 0.00027392109358160123, 0.00027477462236685833, 0.0002756285605097632, 0.0002764829093188367, 0.00027733767010350627, 0.0002781928441741088, 0.000279048432841893, 0.0002799044374190224, 0.00028076085921857776, 0.0002816176995545598, 0.0002824749597418918, 0.00028333264109642255, 0.00028419074493492855, 0.0002850492725751171, 0.0002859082253356287, 0.0002867676045360399, 0.0002876274114968657, 0.00028848764753956253, 0.0002893483139865306, 0.00029020941216111685, 0.00029107094338761747, 0.0002919329089912805, 0.0002927953102983086, 0.0002936581486358617, 0.0002945214253320596, 0.0002953851417159848, 0.0002962492991176849, 0.00029711389886817537, 0.00029797894229944237, 0.00029884443074444525, 0.0002997103655371192, 0.000300576748012378, 0.00030144357950611663, 0.000302310861355214, 0.0003031785948975355, 0.0003040467814719357, 0.00030491542241826107, 0.00030578451907735263, 0.0003066540727910486, 0.000307524084902187, 0.0003083945567546084, 0.0003092654896931585, 0.00031013688506369093, 0.00031100874421306974, 0.0003118810684891722, 0.00031275385924089136, 0.00031362711781813884, 0.00031450084557184735, 0.00031537504385397347, 0.0003162497140175002, 0.00031712485741643967, 0.0003180004754058359, 0.0003188765693417673, 0.0003197531405813495, 0.00032063019048273784, 0.00032150772040513015, 0.0003223857317087694, 0.0003232642257549463, 0.00032414320390600204, 0.0003250226675253309, 0.00032590261797738295, 0.0003267830566276666, 0.0003276639848427515, 0.00032854540399027105, 0.0003294273154389249, 0.00033030972055848195, 0.0003311926207197828, 0.00033207601729474246, 0.00033295991165635297, 0.00033384430517868617, 0.00033472919923689627, 0.00033561459520722257, 0.00033650049446699203, 0.00033738689839462205, 0.000338273808369623, 0.0003391612257726011, 0.00034004915198526084, 0.0003409375883904077, 0.0003418265363719511, 0.00034271599731490644, 0.00034360597260539854, 0.0003444964636306636, 0.0003453874717790524, 0.0003462789984400326, 0.00034717104500419147, 0.00034806361286323885, 0.00034895670341000937, 0.00034985031803846543, 0.00035074445814369974, 0.00035163912512193793, 0.0003525343203705414, 0.0003534300452880098, 0.0003543263012739837, 0.00035522308972924747, 0.00035612041205573163, 0.0003570182696565157, 0.00035791666393583096, 0.00035881559629906277, 0.00035971506815275355, 0.00036061508090460534, 0.0003615156359634825, 0.00036241673473941423, 0.00036331837864359744, 0.00036422056908839924, 0.0003651233074873597, 0.00036602659525519446, 0.0003669304338077974, 0.0003678348245622434, 0.00036873976893679085, 0.00036964526835088436, 0.00037055132422515757, 0.00037145793798143553, 0.00037236511104273766, 0.0003732728448332802, 0.000374181140778479, 0.00037509000030495204, 0.00037599942484052226, 0.0003769094158142201, 0.0003778199746562863, 0.0003787311027981743, 0.00037964280167255323, 0.0003805550727133104, 0.0003814679173555539, 0.0003823813370356154, 0.00038329533319105273, 0.0003842099072606526, 0.0003851250606844332, 0.00038604079490364696, 0.000386957111360783, 0.0003878740114995701, 0.00038879149676497907, 0.00038970956860322567, 0.000390628228461773, 0.0003915474777893345, 0.0003924673180358762, 0.00039338775065261974, 0.0003943087770920449, 0.00039523039880789225, 0.0003961526172551658, 0.0003970754338901357, 0.0003979988501703409, 0.00039892286755459176, 0.0003998474875029728, 0.0004007727114768452, 0.00040169854093884973, 0.00040262497735290924, 0.00040355202218423134, 0.000404479676899311, 0.0004054079429659333, 0.0004063368218531761, 0.00040726631503141267, 0.0004081964239723144, 0.0004091271501488533, 0.000410058495035305, 0.00041099046010725093, 0.00041192304684158147, 0.00041285625671649823, 0.000413790091211517, 0.0004147245518074702, 0.00041565963998650967, 0.0004165953572321093, 0.0004175317050290677, 0.00041846868486351076, 0.0004194062982228945, 0.0004203445465960076, 0.0004212834314729741, 0.00042222295434525607, 0.0004231631167056562, 0.0004241039200483206, 0.00042504536586874137, 0.00042598745566375923, 0.0004269301909315663, 0.00042787357317170866, 0.0004288176038850891, 0.0004297622845739696, 0.00043070761674197434, 0.0004316536018940919, 0.00043260024153667835, 0.0004335475371774597, 0.0004344954903255345, 0.00043544410249137666, 0.0004363933751868381, 0.00043734330992515133, 0.0004382939082209321, 0.0004392451715901821, 0.00044019710155029175, 0.0004411496996200426, 0.0004421029673196103, 0.00044305690617056696, 0.00044401151769588395, 0.0004449668034199346, 0.00044592276486849695, 0.00044687940356875607, 0.0004478367210493071, 0.00044879471884015767, 0.0004497533984727307, 0.00045071276147986704, 0.00045167280939582805, 0.0004526335437562983, 0.0004535949660983883, 0.00045455707796063704, 0.00045551988088301485, 0.0004564833764069258, 0.00045744756607521056, 0.00045841245143214904, 0.00045937803402346295, 0.0004603443153963186, 0.00046131129709932946, 0.0004622789806825588, 0.00046324736769752246, 0.00046421645969719143, 0.00046518625823599463, 0.00046615676486982136, 0.00046712798115602417, 0.0004680999086534214, 0.00046907254892229993, 0.0004700459035244177, 0.0004710199740230066, 0.00047199476198277494, 0.0004729702689699101, 0.0004739464965520814, 0.0004749234462984425, 0.00047590111977963433, 0.0004768795185677875, 0.00047785864423652513, 0.00047883849836096544, 0.00047981908251772446, 0.00048080039828491864, 0.00048178244724216755, 0.0004827652309705965, 0.00048374875105283927, 0.00048473300907304076, 0.00048571800661685957, 0.00048670374527147074, 0.00048769022662556845, 0.0004886774522693685, 0.0004896654237946113, 0.0004906541427945641, 0.0004916436108640241, 0.0004926338295993208, 0.0004936248005983187, 0.00049461652546042, 0.0004956090057865675, 0.0004966022431792469, 0.0004975962392424896, 0.0004985909955818754, 0.0004995865138045353, 0.0005005827955191537, 0.0005015798423359714, 0.0005025776558667885, 0.0005035762377249666, 0.0005045755895254317, 0.0005055757128846767, 0.0005065766094207643, 0.0005075782807533295, 0.0005085807285035823, 0.0005095839542943105, 0.000510587959749882, 0.0005115927464962477, 0.0005125983161609443, 0.0005136046703730967, 0.000514611810763421, 0.0005156197389642268, 0.0005166284566094197, 0.0005176379653345048, 0.0005186482667765884, 0.0005196593625743813, 0.0005206712543682014, 0.0005216839437999759, 0.0005226974325132444, 0.0005237117221531615, 0.0005247268143664995, 0.0005257427108016506, 0.0005267594131086302, 0.0005277769229390794, 0.0005287952419462674, 0.0005298143717850942, 0.0005308343141120938, 0.0005318550705854358, 0.0005328766428649293, 0.0005338990326120247, 0.0005349222414898167, 0.0005359462711630468, 0.0005369711232981062, 0.0005379967995630383, 0.0005390233016275411, 0.0005400506311629707, 0.0005410787898423429, 0.0005421077793403365, 0.000543137601333296, 0.000544168257499234, 0.000545199749517834, 0.0005462320790704528, 0.0005472652478401237, 0.0005482992575115587, 0.0005493341097711513, 0.0005503698063069793, 0.0005514063488088071, 0.0005524437389680888, 0.0005534819784779705, 0.0005545210690332933, 0.0005555610123305956, 0.0005566018100681163, 0.0005576434639457966, 0.0005586859756652837, 0.0005597293469299324, 0.0005607735794448087, 0.0005618186749166921, 0.000562864635054078, 0.0005639114615671805, 0.0005649591561679354, 0.0005660077205700026, 0.0005670571564887687, 0.0005681074656413497, 0.0005691586497465937, 0.0005702107105250838, 0.0005712636496991402, 0.0005723174689928233, 0.0005733721701319365, 0.0005744277548440282, 0.0005754842248583951, 0.0005765415819060847, 0.0005775998277198978, 0.0005786589640343913, 0.0005797189925858808, 0.0005807799151124434, 0.0005818417333539202, 0.0005829044490519188, 0.0005839680639498165, 0.0005850325797927626, 0.000586097998327681, 0.0005871643213032729, 0.0005882315504700197, 0.0005892996875801853, 0.0005903687343878193, 0.0005914386926487589, 0.0005925095641206322, 0.0005935813505628608, 0.000594654053736662, 0.0005957276754050519, 0.000596802217332848, 0.0005978776812866717, 0.0005989540690349512, 0.0006000313823479238, 0.000601109622997639, 0.0006021887927579608, 0.0006032688934045704, 0.0006043499267149693, 0.0006054318944684815, 0.0006065147984462562, 0.0006075986404312707, 0.0006086834222083328, 0.0006097691455640836, 0.0006108558122870002, 0.0006119434241673984, 0.000613031982997435, 0.000614121490571111, 0.000615211948684274, 0.0006163033591346207, 0.0006173957237216998, 0.0006184890442469146, 0.0006195833225135256, 0.0006206785603266533, 0.0006217747594932807, 0.0006228719218222561, 0.0006239700491242956, 0.000625069143211986, 0.0006261692058997872, 0.0006272702390040352, 0.0006283722443429442, 0.00062947522373661, 0.0006305791790070119, 0.0006316841119780162, 0.000632790024475378, 0.0006338969183267444, 0.0006350047953616571, 0.0006361136574115548, 0.0006372235063097762, 0.0006383343438915626, 0.0006394461719940604, 0.0006405589924563238, 0.0006416728071193175, 0.0006427876178259194, 0.0006439034264209231, 0.0006450202347510411, 0.0006461380446649066, 0.0006472568580130768, 0.0006483766766480355, 0.0006494975024241954, 0.0006506193371979012, 0.000651742182827432, 0.0006528660411730039, 0.0006539909140967731, 0.000655116803462838, 0.0006562437111372422, 0.0006573716389879772, 0.0006585005888849848, 0.0006596305627001599, 0.0006607615623073533, 0.000661893589582374, 0.0006630266464029924, 0.0006641607346489424, 0.0006652958562019246, 0.0006664320129456083, 0.000667569206765635, 0.0006687074395496202, 0.0006698467131871567, 0.0006709870295698169, 0.0006721283905911559, 0.0006732707981467136, 0.0006744142541340175, 0.0006755587604525858, 0.0006767043190039296, 0.0006778509316915557, 0.0006789986004209693, 0.0006801473270996767, 0.0006812971136371877, 0.0006824479619450187, 0.000683599873936695, 0.0006847528515277538, 0.0006859068966357461, 0.0006870620111802405, 0.0006882181970828252, 0.0006893754562671103, 0.0006905337906587314, 0.0006916932021853515, 0.000692853692776664, 0.0006940152643643954, 0.0006951779188823075, 0.0006963416582662009, 0.0006975064844539168, 0.0006986723993853402, 0.0006998394050024024, 0.0007010075032490837, 0.0007021766960714159, 0.0007033469854174852, 0.0007045183732374348, 0.0007056908614834673, 0.0007068644521098478, 0.0007080391470729063, 0.0007092149483310403, 0.0007103918578447177, 0.0007115698775764793, 0.0007127490094909414, 0.0007139292555547987, 0.0007151106177368267, 0.0007162930980078845, 0.0007174766983409175, 0.0007186614207109601, 0.000719847267095138, 0.0007210342394726714, 0.0007222223398248771, 0.0007234115701351719, 0.0007246019323890744, 0.0007257934285742083, 0.0007269860606803049, 0.0007281798306992054, 0.0007293747406248641, 0.000730570792453351, 0.000731767988182854, 0.000732966329813682, 0.0007341658193482673, 0.0007353664587911687, 0.0007365682501490734, 0.0007377711954308004, 0.0007389752966473029, 0.0007401805558116708, 0.0007413869749391336, 0.0007425945560470627, 0.0007438033011549749, 0.0007450132122845339, 0.0007462242914595538, 0.0007474365407060017, 0.0007486499620519996, 0.0007498645575278283, 0.000751080329165929, 0.0007522972790009065, 0.0007535154090695318, 0.0007547347214107444, 0.0007559552180656555, 0.0007571769010775505, 0.0007583997724918913, 0.0007596238343563195, 0.0007608490887206585, 0.0007620755376369168, 0.0007633031831592902, 0.0007645320273441644, 0.0007657620722501182, 0.0007669933199379255, 0.0007682257724705585, 0.0007694594319131901, 0.0007706943003331965, 0.0007719303798001601, 0.0007731676723858719, 0.0007744061801643344, 0.0007756459052117641, 0.0007768868496065942, 0.0007781290154294775, 0.0007793724047632884, 0.0007806170196931264, 0.0007818628623063183, 0.0007831099346924207, 0.0007843582389432233, 0.0007856077771527507, 0.0007868585514172659, 0.0007881105638352723, 0.0007893638165075168, 0.0007906183115369924, 0.0007918740510289405, 0.0007931310370908541, 0.0007943892718324801, 0.000795648757365822, 0.0007969094958051427, 0.000798171489266967, 0.0007994347398700844, 0.0008006992497355517, 0.0008019650209866957, 0.0008032320557491159, 0.0008045003561506869, 0.0008057699243215616, 0.000807040762394173, 0.000808312872503238, 0.0008095862567857589, 0.000810860917381027, 0.0008121368564306246, 0.0008134140760784282, 0.0008146925784706107, 0.0008159723657556444, 0.0008172534400843033, 0.0008185358036096663, 0.0008198194584871194, 0.0008211044068743584, 0.0008223906509313919, 0.0008236781928205436, 0.0008249670347064551, 0.0008262571787560885, 0.0008275486271387295, 0.0008288413820259893, 0.0008301354455918077, 0.0008314308200124557, 0.0008327275074665384, 0.0008340255101349974, 0.0008353248302011132, 0.0008366254698505085, 0.0008379274312711503, 0.0008392307166533531, 0.0008405353281897809, 0.0008418412680754505, 0.0008431485385077336, 0.0008444571416863599, 0.0008457670798134196, 0.0008470783550933663, 0.000848390969733019, 0.0008497049259415655, 0.0008510202259305645, 0.0008523368719139487, 0.0008536548661080273, 0.0008549742107314887, 0.0008562949080054028, 0.0008576169601532244, 0.0008589403694007951, 0.0008602651379763464, 0.0008615912681105023, 0.0008629187620362819, 0.000864247621989102, 0.0008655778502067801, 0.0008669094489295364, 0.0008682424203999972, 0.0008695767668631972, 0.0008709124905665821, 0.0008722495937600113, 0.0008735880786957607, 0.0008749279476285255, 0.0008762692028154224, 0.0008776118465159924, 0.0008789558809922039, 0.0008803013085084549, 0.0008816481313315757, 0.0008829963517308317, 0.000884345971977926, 0.0008856969943470024, 0.0008870494211146473, 0.0008884032545598931, 0.0008897584969642205, 0.0008911151506115611, 0.0008924732177883005, 0.0008938327007832804, 0.0008951936018878016, 0.0008965559233956267, 0.0008979196676029825, 0.0008992848368085629, 0.0009006514333135314, 0.0009020194594215239, 0.0009033889174386515, 0.0009047598096735025, 0.0009061321384371459, 0.0009075059060431336, 0.0009088811148075032, 0.0009102577670487804, 0.0009116358650879822, 0.000913015411248619, 0.0009143964078566976, 0.0009157788572407237, 0.0009171627617317049, 0.0009185481236631526, 0.0009199349453710855, 0.000921323229194032, 0.0009227129774730323, 0.0009241041925516422, 0.0009254968767759347, 0.0009268910324945031, 0.0009282866620584637, 0.0009296837678214584, 0.0009310823521396573, 0.0009324824173717616, 0.0009338839658790057, 0.0009352870000251607, 0.0009366915221765363, 0.0009380975347019839, 0.0009395050399728991, 0.0009409140403632243, 0.0009423245382494517, 0.0009437365360106255, 0.0009451500360283449, 0.0009465650406867666, 0.0009479815523726075, 0.0009493995734751473, 0.0009508191063862315, 0.0009522401535002736, 0.000953662717214258, 0.0009550867999277426, 0.0009565124040428614, 0.0009579395319643275, 0.0009593681860994353, 0.0009607983688580634, 0.0009622300826526772, 0.000963663329898332, 0.0009650981130126746, 0.0009665344344159471, 0.000967972296530989, 0.0009694117017832399, 0.0009708526526007421, 0.0009722951514141437, 0.0009737392006567005, 0.0009751848027642796, 0.000976631960175361, 0.0009780806753310414, 0.0009795309506750358, 0.000980982788653681, 0.0009824361917159378, 0.0009838911623133938, 0.000985347702900266, 0.0009868058159334034, 0.00098826550387229, 0.000989726769179047, 0.000991189614318436, 0.000992654041757861, 0.0009941200539673716, 0.0009955876534196654, 0.0009970568425900909, 0.00099852762395665, 0.0010000000000000002 ];
  //const ONE_LITER_INTERNAL_AREAS = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.011123331213573921, 0.011124402753370363, 0.011125492060041207, 0.011126599136314624, 0.011127723984963147, 0.01112886660880366, 0.01113002701069743, 0.011131205193550058, 0.01113240116031152, 0.011133614913976148, 0.011134846457582642, 0.01113609579421405, 0.0111373629269978, 0.011138647859105653, 0.011139950593753752, 0.011141271134202595, 0.011142609483757037, 0.011143965645766299, 0.011145339623623953, 0.011146731420767947, 0.011148141040680572, 0.01114956848688849, 0.011151013762962727, 0.01115247687251866, 0.011153957819216026, 0.011155456606758936, 0.011156973238895845, 0.011158507719419581, 0.011160060052167325, 0.011161630241020619, 0.011163218289905364, 0.01116482420279184, 0.011166447983694658, 0.011168089636672809, 0.01116974916582964, 0.011171426575312858, 0.011173121869314528, 0.011174835052071076, 0.011176566127863297, 0.01117831510101634, 0.011180081975899706, 0.011181866756927276, 0.011183669448557268, 0.011185490055292286, 0.01118732858167927, 0.011189185032309543, 0.011191059411818768, 0.011192951724886982, 0.011194861976238576, 0.01119679017064231, 0.011198736312911293, 0.011200700407902999, 0.011202682460519269, 0.01120468247570629, 0.011206700458454634, 0.011208736413799204, 0.011210790346819278, 0.011212862262638503, 0.011214952166424874, 0.011217060063390741, 0.011219185958792838, 0.011221329857932234, 0.011223491766154376, 0.011225671688849057, 0.01122786963145045, 0.011230085599437072, 0.0112323195983318, 0.01123457163370188, 0.011236841711158924, 0.011239129836358884, 0.011241436015002089, 0.011243760252833227, 0.011246102555641338, 0.011248462929259835, 0.011250841379566478, 0.011253237912483399, 0.011255652533977081, 0.01125808525005837, 0.011260536066782487, 0.01126300499024899, 0.01126549202660181, 0.011267997182029239, 0.011270520462763927, 0.011273061875082884, 0.011275621425307482, 0.011278199119803455, 0.011280794964980896, 0.011283408967294253, 0.011286041133242341, 0.01128869146936834, 0.011291359982259778, 0.011294046678548553, 0.01129675156491092, 0.011299474648067494, 0.011302215934783253, 0.011304975431867537, 0.011307753146174037, 0.011310549084600817, 0.01131336325409029, 0.011316195661629237, 0.011319046314248802, 0.01132191521902448, 0.011324802383076133, 0.011327707813567981, 0.011330631517708611, 0.011333573502750955, 0.011336533775992329, 0.011339512344774382, 0.011342509216483151, 0.01134552439854901, 0.011348557898446705, 0.011351609723695347, 0.011354679881858393, 0.011357768380543675, 0.011360875227403379, 0.011364000430134052, 0.011367143996476606, 0.011370305934216297, 0.011373486251182764, 0.011376684955249992, 0.011379902054336335, 0.011383137556404497, 0.011386391469461552, 0.01138966380155893, 0.01139295456079242, 0.011396263755302184, 0.011399591393272722, 0.01140293748293292, 0.011406302032555998, 0.011409685050459558, 0.011413086545005556, 0.011416506524600306, 0.011419944997694475, 0.011423401972783114, 0.011426877458405609, 0.011430371463145721, 0.011433883995631566, 0.011437415064535624, 0.01144096467857473, 0.01144453284651009, 0.011448119577147257, 0.011451724879336154, 0.011455348761971062, 0.011458991233990624, 0.011462652304377834, 0.011466331982160061, 0.011470030276409027, 0.011473747196240816, 0.01147748275081587, 0.01148123694933899, 0.011485009801059348, 0.01148880131527046, 0.01149261150131022, 0.011496440368560875, 0.01150028792644902, 0.01150415418444563, 0.01150803915206604, 0.011511942838869924, 0.01151586525446134, 0.011519806408488695, 0.01152376631064476, 0.011527744970666661, 0.011531742398335888, 0.011535758603478299, 0.011539793595964102, 0.011543847385707873, 0.011547919982668537, 0.011552011396849391, 0.011556121638298089, 0.011560250717106648, 0.01156439864341144, 0.011568565427393197, 0.011572751079277022, 0.011576955609332364, 0.011581179027873041, 0.011585421345257236, 0.011589682571887484, 0.01159396271821068, 0.011598261794718087, 0.011602579811945318, 0.011606916780472362, 0.011611272710923552, 0.011615647613967588, 0.011620041500317538, 0.011624454380730818, 0.011628886266009213, 0.011633337166998868, 0.01163780709459028, 0.011642296059718315, 0.011646804073362202, 0.011651331146545521, 0.011655877290336215, 0.011660442515846595, 0.011665026834233327, 0.011669630256697433, 0.011674252794484306, 0.011678894458883692, 0.011683555261229696, 0.011688235212900792, 0.011692934325319804, 0.011697652609953925, 0.011702390078314705, 0.011707146741958056, 0.011711922612484243, 0.011716717701537909, 0.011721532020808036, 0.011726365582027982, 0.011731218396975461, 0.01173609047747254, 0.01174098183538566, 0.011745892482625616, 0.011750822431147561, 0.011755771692951009, 0.011760740280079838, 0.011765728204622287, 0.011770735478710952, 0.01177576211452279, 0.011780808124279118, 0.011785873520245616, 0.011790958314732324, 0.011796062520093645, 0.011801186148728335, 0.011806329213079513, 0.011811491725634666, 0.011816673698925632, 0.011821875145528613, 0.011827096078064177, 0.011832336509197242, 0.011837596451637091, 0.011842875918137373, 0.01184817492149609, 0.01185349347455561, 0.011858831590202653, 0.011864189281368311, 0.011869566561028031, 0.011874963442201618, 0.011880379937953236, 0.011885816061391424, 0.01189127182566906, 0.0118967472439834, 0.011902242329576053, 0.011907757095732984, 0.011913291555784529, 0.01191884572310538, 0.01192441961111459, 0.01193001323327556, 0.01193562660309608, 0.011941259734128276, 0.011946912639968634, 0.01195258533425802, 0.011958277830681645, 0.01196399014296908, 0.011969722284894263, 0.011975474270275498, 0.011981246112975432, 0.011987037826901087, 0.01199284942600384, 0.01199868092427943, 0.012004532335767953, 0.01201040367455387, 0.012016294954766008, 0.012022206190577539, 0.012028137396206003, 0.012034088585913304, 0.01204005977400571, 0.012046050974833834, 0.01205206220279266, 0.01205809347232154, 0.012064144797904169, 0.012070216194068617, 0.012076307675387307, 0.012082419256477017, 0.012088550951998907, 0.012094702776658476, 0.01210087474520559, 0.012107066872434475, 0.012113279173183727, 0.012119511662336286, 0.012125764354819461, 0.012132037265604929, 0.012138330409708718, 0.012144643802191213, 0.012150977458157167, 0.012157331392755693, 0.012163705621180264, 0.012170100158668706, 0.012176515020503221, 0.01218295022201036, 0.012189405778561032, 0.012195881705570516, 0.012202378018498446, 0.012208894732848816, 0.012215431864169981, 0.012221989428054665, 0.01222856744013994, 0.01223516591610724, 0.012241784871682367, 0.012248424322635478, 0.012255084284781092, 0.01226176477397809, 0.012268465806129716, 0.01227518739718356, 0.012281929563131594, 0.01228869232001013, 0.012295475683899854, 0.012302279670925809, 0.012309104297257397, 0.012315949579108384, 0.012322815532736888, 0.01232970217444541, 0.01233660952058077, 0.01234353758753419, 0.012350486391741236, 0.012357455949681826, 0.012364446277880255, 0.012371457392905167, 0.01237848931136957, 0.012385542049930835, 0.012392615625290685, 0.012399710054195216, 0.012406825353434877, 0.012413961539844476, 0.012421118630303185, 0.012428296641734534, 0.01243549559110642, 0.012442715495431089, 0.01244995637176516, 0.012457218237209605, 0.012464501108909756, 0.01247180500405531, 0.01247912993988032, 0.0124864759336632, 0.01249384300272673, 0.012501231164438048, 0.012508640436208644, 0.01251607083549438, 0.012523522379795473, 0.012530995086656503, 0.012538488973666408, 0.012546004058458491, 0.012553540358710407, 0.012561097892144176, 0.012568676676526188, 0.012576276729667173, 0.012583898069422235, 0.01259154071369085, 0.012599204680416823, 0.01260688998758835, 0.012614596653237971, 0.012622324695442588, 0.012630074132323466, 0.012637844982046237, 0.012645637262820881, 0.012653450992901749, 0.012661286190587543, 0.012669142874221336, 0.012677021062190553, 0.012684920772926985, 0.012692842024906779, 0.012700784836650441, 0.01270874922672285, 0.012716735213733229, 0.012724742816335172, 0.012732772053226631, 0.012740822943149918, 0.012748895504891706, 0.012756989757283024, 0.012765105719199277, 0.012773243409560207, 0.012781402847329926, 0.012789584051516926, 0.012797787041174026, 0.012806011835398432, 0.012814258453331697, 0.012822526914159738, 0.012830817237112834, 0.012839129441465624, 0.012847463546537104, 0.012855819571690635, 0.012864197536333936, 0.012872597459919087, 0.012881019361942525, 0.012889463261945056, 0.012897929179511845, 0.012906417134272407, 0.012914927145900626, 0.012923459234114752, 0.012932013418677382, 0.012940589719395478, 0.01294918815612037, 0.012957808748747742, 0.012966451517217635, 0.012975116481514467, 0.01298380366166699, 0.012992513077748341, 0.01300124474987601, 0.013009998698211834, 0.013018774942962023, 0.013027573504377162, 0.013036394402752166, 0.013045237658426329, 0.013054103291783298, 0.01306299132325109, 0.013071901773302074, 0.013080834662452986, 0.013089790011264915, 0.013098767840343311, 0.013107768170337998, 0.01311679102194314, 0.013125836415897273, 0.013134904372983298, 0.013143994914028463, 0.01315310805990439, 0.013162243831527061, 0.013171402249856802, 0.013180583335898315, 0.01318978711070066, 0.013199013595357256, 0.013208262811005875, 0.013217534778828668, 0.013226829520052127, 0.013236147055947113, 0.013245487407828853, 0.013254850597056927, 0.013264236645035272, 0.013273645573212195, 0.01328307740308036, 0.013292532156176793, 0.013302009854082867, 0.01331151051842434, 0.01332103417087131, 0.013330580833138247, 0.013340150526983974, 0.013349743274211673, 0.013359359096668902, 0.01336899801624756, 0.013378660054883924, 0.013388345234558618, 0.01339805357729663, 0.013407785105167307, 0.013417539840284369, 0.013427317804805874, 0.013437119020934266, 0.013446943510916331, 0.013456791297043217, 0.013466662401650446, 0.013476556847117883, 0.01348647465586977, 0.013496415850374692, 0.013506380453145608, 0.013516368486739838, 0.013526379973759047, 0.013536414936849282, 0.013546473398700933, 0.013556555382048767, 0.01356666090967189, 0.013576790004393786, 0.013586942689082292, 0.013597118986649608, 0.013607318920052295, 0.013617542512291272, 0.013627789786411824, 0.013638060765503583, 0.013648355472700558, 0.01365867393118111, 0.013669016164167965, 0.013679382194928204, 0.013689772046773269, 0.01370018574305896, 0.01371062330718545, 0.013721084762597261, 0.013731570132783281, 0.013742079441276754, 0.013752612711655288, 0.01376316996754085, 0.013773751232599765, 0.013784356530542725, 0.01379498588512478, 0.013805639320145335, 0.01381631685944817, 0.0138270185269214, 0.013837744346497524, 0.013848494342153395, 0.01385926853791022, 0.01387006695783358, 0.013880889626033396, 0.013891736566663973, 0.013902607803923958, 0.013913503362056365, 0.013924423265348571, 0.01393536753813231, 0.013946336204783683, 0.013957329289723139, 0.0139683468174155, 0.01397938881236994, 0.01399045529914, 0.014001546302323578, 0.014012661846562927, 0.014023801956544676, 0.014034966656999801, 0.014046155972703641, 0.014057369928475895, 0.014068608549180626, 0.014079871859726263, 0.014091159885065579, 0.014102472650195718, 0.01411381018015819, 0.014125172500038852, 0.014136559634967934, 0.014147971610120018, 0.014159408450714046, 0.014170870182013332, 0.014182356829325535, 0.014193868418002683, 0.014205404973441166, 0.014216966521081738, 0.014228553086409492, 0.01424016469495391, 0.014251801372288816, 0.014263463144032406, 0.01427515003584722, 0.014286862073440173, 0.014298599282562545, 0.014310361689009957, 0.014322149318622404, 0.014333962197284241, 0.014345800350924181, 0.0143576638055153, 0.01436955258707503, 0.014381466721665166, 0.014393406235391861, 0.01440537115440564, 0.014417361504901369, 0.014429377313118288, 0.014441418605340001, 0.014453485407894453, 0.014465577747153978, 0.014477695649535242, 0.014489839141499292, 0.014502008249551526, 0.014514203000241704, 0.014526423420163949, 0.01453866953595674, 0.01455094137430292, 0.01456323896192969, 0.014575562325608611, 0.014587911492155613, 0.014600286488430984, 0.014612687341339352, 0.014625114077829736, 0.014637566724895492, 0.01465004530957436, 0.014662549858948406, 0.014675080400144093, 0.014687636960332227, 0.014700219566727972, 0.01471282824659086, 0.014725463027224772, 0.014738123935977968, 0.014750811000243051, 0.014763524247456996, 0.014776263705101128, 0.014789029400701143, 0.014801821361827094, 0.014814639616093394, 0.014827484191158813, 0.01484035511472649, 0.014853252414543907, 0.014866176118402928, 0.014879126254139766, 0.014892102849635002, 0.01490510593281356, 0.01491813553164475, 0.014931191674142221, 0.014944274388363989, 0.014957383702412438, 0.014970519644434303, 0.014983682242620686, 0.014996871525207043, 0.015010087520473194, 0.01502333025674332, 0.015036599762385968, 0.01504989606581403, 0.01506321919548478, 0.01507656917989983, 0.015089946047605166, 0.015103349827191128, 0.015116780547292432, 0.015130238236588133, 0.015143722923801653, 0.01515723463770079, 0.01517077340709768, 0.015184339260848834, 0.015197932227855118, 0.015211552337061753, 0.015225199617458338, 0.015238874098078817, 0.015252575808001498, 0.015266304776349052, 0.015280061032288506, 0.01529384460503126, 0.015307655523833051, 0.015321493817994006, 0.01533535951685859, 0.015349252649815626, 0.01536317324629832, 0.015377121335784222, 0.015391096947795252, 0.01540510011189767, 0.015419130857702123, 0.015433189214863597, 0.015447275213081467, 0.015461388882099426, 0.015475530251705567, 0.015489699351732325, 0.015503896212056495, 0.015518120862599235, 0.015532373333326067, 0.01554665365424687, 0.015560961855415884, 0.01557529796693171, 0.015589662018937307, 0.01560405404162, 0.015618474065211472, 0.015632922119987756, 0.015647398236269268, 0.015661902444420766, 0.015676434774851374, 0.015690995258014574, 0.01570558392440822, 0.0157202008045745, 0.015734845929100006, 0.01574951932861564, 0.015764221033796707, 0.015778951075362847, 0.015793709484078065, 0.015808496290750738, 0.015823311526233584, 0.015838155221423705, 0.015853027407262545, 0.015867928114735915, 0.015882857374873986, 0.015897815218751294, 0.01591280167748673, 0.01592781678224353, 0.015942860564229337, 0.0159579330546961, 0.015973034284940173, 0.015988164286302224, 0.016003323090167335, 0.016018510727964907, 0.016033727231168728, 0.01604897263129692, 0.016064246959911987, 0.01607955024862079, 0.016094882529074542, 0.016110243832968833, 0.016125634192043582, 0.016141053638083103, 0.016156502202916055, 0.016171979918415458, 0.016187486816498693, 0.016203022929127498, 0.01621858828830798, 0.0162341829260906, 0.016249806874570182, 0.016265460165885908, 0.01628114283222133, 0.016296854905804337, 0.016312596418907206, 0.016328367403846557, 0.01634416789298339, 0.016359997918723036, 0.016375857513515207, 0.01639174670985397, 0.01640766554027776, 0.016423614037369357, 0.01643959223375591, 0.01645560016210894, 0.016471637855144307, 0.016487705345622248, 0.016503802666347347, 0.016519929850168556, 0.0165360869299792, 0.016552273938716933, 0.0165684909093638, 0.016584737874946204, 0.01660101486853488, 0.01661732192324495, 0.016633659072235893, 0.01665002634871154, 0.016666423785920096, 0.016682851417154105, 0.01669930927575049, 0.01671579739509054, 0.016732315808599876, 0.0167488645497485, 0.01676544365205078, 0.016782053149065425, 0.016798693074395528, 0.01681536346168852, 0.01683206434463621, 0.016848795756974747, 0.01686555773248467, 0.01688235030499085, 0.016899173508362533, 0.016916027376513324, 0.016932911943401192, 0.016949827243028452, 0.016966773309441793, 0.016983750176732263, 0.017000757879035273, 0.01701779645053058, 0.017034865925442316, 0.017051966338038967, 0.017069097722633386, 0.017086260113582778, 0.017103453545288708, 0.017120678052197122, 0.01713793366879829, 0.017155220429626875, 0.017172538369261893, 0.0171898875223267, 0.01720726792348904, 0.017224679607461005, 0.01724212260899904, 0.01725959696290397, 0.017277102704020962, 0.017294639867239555, 0.017312208487493642, 0.017329808599761482, 0.01734744023906569, 0.01736510344047324, 0.017382798239095474, 0.017400524670088086, 0.017418282768651133, 0.017436072570029045, 0.01745389410951058, 0.017471747422428904, 0.0174896325441615, 0.01750754951013023, 0.017525498355801326, 0.017543479116685353, 0.01756149182833727, 0.01757953652635637, 0.017597613246386326, 0.017615722024115148, 0.017633862895275233, 0.017652035895643316, 0.017670241061040513, 0.01768847842733228, 0.017706748030428453, 0.01772504990628321, 0.017743384090895105, 0.017761750620307045, 0.017780149530606287, 0.017798580857924476, 0.017817044638437595, 0.017835540908365994, 0.01785406970397438, 0.017872631061571834, 0.017891225017511777, 0.017909851608192005, 0.017928510870054665, 0.017947202839586285, 0.017965927553317725, 0.017984685047824224, 0.018003475359725372, 0.018022298525685126, 0.018041154582411807, 0.018060043566658086, 0.018078965515221004, 0.018097920464941946, 0.018116908452706686, 0.018135929515445324, 0.01815498369013235, 0.018174071013786607, 0.018193191523471288, 0.018212345256293953, 0.01823153224940652, 0.01825075254000528, 0.01827000616533086, 0.01828929316266827, 0.018308613569346877, 0.018327967422740395, 0.01834735476026692, 0.018366775619388875, 0.018386230037613093, 0.01840571805249071, 0.018425239701617267, 0.018444795022632653, 0.018464384053221112, 0.018484006831111233, 0.018503663394076015, 0.018523353779932764, 0.018543078026543175, 0.0185628361718133, 0.018582628253693535, 0.018602454310178675, 0.018622314379307822, 0.018642208499164488, 0.01866213670787652, 0.018682099043616115, 0.01870209554459987, 0.018722126249088703, 0.01874219119538791, 0.018762290421847145, 0.018782423966860425, 0.018802591868866122, 0.01882279416634697, 0.018843030897830074, 0.018863302101886886, 0.018883607817133212, 0.018903948082229245, 0.01892432293587952, 0.018944732416832925, 0.018965176563882736, 0.018985655415866554, 0.019006169011666376, 0.01902671739020853, 0.019047300590463733, 0.01906791865144702, 0.01908857161221784, 0.019109259511879962, 0.01912998238958153, 0.01915074028451505, 0.019171533235917384, 0.019192361283069757, 0.019213224465297756, 0.019234122821971334, 0.01925505639250478, 0.019276025216356775, 0.019297029333030336, 0.019318068782072855, 0.019339143603076085, 0.019360253835676123, 0.01938139951955345, 0.019402580694432885, 0.019423797400083632, 0.019445049676319232, 0.01946633756299759, 0.019487661100020995, 0.019509020327336063, 0.019530415284933787, 0.019551846012849542, 0.019573312551163013, 0.01959481493999829, 0.019616353219523812, 0.019637927429952365, 0.019659537611541093, 0.019681183804591537, 0.019702866049449562, 0.0197245843865054, 0.019746338856193656, 0.01976812949899329, 0.019789956355427615, 0.01981181946606431, 0.01983371887151542, 0.01985565461243734, 0.019877626729530827, 0.019899635263541018, 0.019921680255257382, 0.019943761745513752, 0.019965879775188353, 0.01998803438520374, 0.02001022561652683, 0.020032453510168906, 0.020054718107185624, 0.020077019448676982, 0.02009935757578735, 0.02012173252970545, 0.020144144351664367, 0.020166593082941546, 0.02018907876485881, 0.020211601438782315, 0.02023416114612258, 0.020256757928334517, 0.02027939182691736, 0.020302062883414733, 0.020324771139414582, 0.020347516636549264, 0.02037029941649546, 0.02039311952097422, 0.020415976991750958, 0.020438871870635446, 0.02046180419948183, 0.02048477402018859, 0.02050778137469859, 0.020530826304999035, 0.020553908853121503, 0.02057702906114194, 0.020600186971180632, 0.02062338262540224, 0.020646616066015783, 0.020669887335274643, 0.02069319647547655, 0.020716543528963606, 0.020739928538122267, 0.020763351545383377, 0.02078681259322208, 0.020810311724157943, 0.020833848980754858, 0.020857424405621095, 0.020881038041409266, 0.020904689930816362, 0.020928380116583715, 0.02095210864149705, 0.02097587554838642, 0.020999680880126253, 0.02102352467963532, 0.02104740698987679, 0.02107132785385815, 0.021095287314631287, 0.021119285415292417, 0.021143322198982125, 0.021167397708885365, 0.02119151198823145, 0.02121566508029404, 0.02123985702839118, 0.021264087875885247, 0.02128835766618299, 0.02131266644273554, 0.021337014249038347, 0.021361401128631257, 0.021385827125098462, 0.02141029228206852, 0.021434796643214328, 0.021459340252253187, 0.021483923152946706, 0.021508545389100887, 0.021533207004566103, 0.021557908043237057, 0.021582648549052827, 0.02160742856599685, 0.02163224813809694, 0.021657107309425227, 0.021682006124098256, 0.02170694462627689, 0.021731922860166387, 0.021756940870016325 ];
  //const ONE_LITER_INTERNAL_VOLUMES = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.860184098385957e-7, 0.0000013721029056376936, 0.00000205825458314844, 0.0000027444745382902374, 0.0000034307638671534813, 0.0000041171236660022955, 0.000004803555031277269, 0.000005490059059598189, 0.0000061766368477667815, 0.000006863289492769443, 0.000007550018091779977, 0.000008236823742162333, 0.00000892370754147334, 0.000009610670587465439, 0.000010297713978089427, 0.000010984838811497187, 0.000011672046186044422, 0.0000123593372002934, 0.00001304671295301568, 0.00001373417454319485, 0.00001442172307002927, 0.000015109359632934798, 0.000015797085331547534, 0.000016484901265726553, 0.000017172808535556633, 0.000017860808241351005, 0.000018548901483654082, 0.000019237089363244193, 0.00001992537298113632, 0.00002061375343858483, 0.00002130223183708623, 0.00002199080927838188, 0.00002267948686446073, 0.00002336826569756207, 0.000024057146880178264, 0.000024746131515057474, 0.000025435220705206406, 0.00002612441555389304, 0.00002681371716464937, 0.000027503126641274145, 0.000028192645087835583, 0.000028882273608674138, 0.00002957201330840521, 0.000030261865291921896, 0.00003095183066439772, 0.00003164191053128937, 0.00003233210599833943, 0.00003302241817157912, 0.00003371284815733104, 0.000034403397062211895, 0.00003509406599313522, 0.00003578485605731414, 0.0000364757683622641, 0.00003716680401580558, 0.000037857964126066865, 0.000038549249801486746, 0.00003924066215081728, 0.000039932202283126525, 0.00004062387130780126, 0.00004131567033454973, 0.00004200760047340439, 0.00004269966283472463, 0.0000433918585291995, 0.000044084188667850474, 0.000044776654362034176, 0.0000454692567234451, 0.000046161996864118366, 0.00004685487589643243, 0.00004754789493311187, 0.000048241055087230046, 0.000048934357472211916, 0.00004962780320183671, 0.00005032139339024071, 0.00005101512915191996, 0.00005170901160173299, 0.0000524030418549036, 0.00005309722102702355, 0.00005379155023405531, 0.0000544860305923348, 0.000055180663218574125, 0.00005587544922986432, 0.00005657038974367806, 0.000057265485877872415, 0.00005796073875069159, 0.00005865614948076964, 0.000059351719187133236, 0.000060047448989204366, 0.000060743340006803105, 0.00006143939336015033, 0.00006213561016987044, 0.00006283199155699414, 0.00006352853864296115, 0.00006422525254962291, 0.00006492213439924538, 0.00006561918531451172, 0.00006631640641852508, 0.00006701379883481125, 0.00006771136368732149, 0.0000684091021004352, 0.00006910701519896274, 0.00006980510410814802, 0.00007050336995367137, 0.00007120181386165225, 0.00007190043695865192, 0.00007259924037167625, 0.00007329822522817841, 0.00007399739265606164, 0.00007469674378368196, 0.00007539627973985091, 0.00007609600165383829, 0.0000767959106553749, 0.00007749600787465529, 0.00007819629444234044, 0.00007889677148956056, 0.00007959744014791779, 0.00008029830154948895, 0.00008099935682682827, 0.00008170060711297013, 0.00008240205354143179, 0.00008310369724621612, 0.00008380553936181437, 0.00008450758102320886, 0.00008520982336587574, 0.00008591226752578772, 0.00008661491463941682, 0.00008731776584373709, 0.00008802082227622733, 0.00008872408507487389, 0.00008942755537817331, 0.00009013123432513515, 0.00009083512305528466, 0.00009153922270866556, 0.00009224353442584272, 0.00009294805934790497, 0.00009365279861646777, 0.000094357753373676, 0.00009506292476220665, 0.00009576831392527156, 0.0000964739220066202, 0.00009717975015054238, 0.00009788579950187095, 0.00009859207120598458, 0.00009929856640881052, 0.00010000528625682725, 0.00010071223189706728, 0.0001014194044771199, 0.00010212680514513385, 0.00010283443504982013, 0.00010354229534045467, 0.0001042503871668811, 0.00010495871167951349, 0.00010566727002933907, 0.000106376063367921, 0.00010708509284740104, 0.00010779435962050234, 0.00010850386484053217, 0.00010921360966138464, 0.00010992359523754343, 0.00011063382272408456, 0.00011134429327667909, 0.00011205500805159587, 0.0001127659682057043, 0.000113477174896477, 0.00011418862928199264, 0.00011490033252093857, 0.00011561228577261364, 0.00011632449019693089, 0.00011703694695442034, 0.00011774965720623163, 0.00011846262211413685, 0.00011917584284053323, 0.00011988932054844589, 0.00012060305640153056, 0.00012131705156407634, 0.0001220313072010084, 0.00012274582447789078, 0.00012346060456092903, 0.00012417564861697303, 0.00012489095781351972, 0.00012560653331871577, 0.00012632237630136038, 0.00012703848793090797, 0.00012775486937747097, 0.00012847152181182252, 0.0001291884464053992, 0.00012990564433030378, 0.00013062311675930794, 0.00013134086486585507, 0.00013205888982406288, 0.00013277719280872628, 0.00013349577499532, 0.0001342146375600014, 0.00013493378167961313, 0.000135653208531686, 0.00013637291929444154, 0.00013709291514679491, 0.0001378131972683575, 0.0001385337668394397, 0.0001392546250410537, 0.00013997577305491614, 0.00014069721206345093, 0.00014141894324979192, 0.00014214096779778564, 0.00014286328689199407, 0.00014358590171769737, 0.00014430881346089657, 0.0001450320233083164, 0.00014575553244740788, 0.00014647934206635121, 0.00014720345335405844, 0.0001479278675001762, 0.00014865258569508836, 0.00014937760912991897, 0.0001501029389965348, 0.00015082857648754811, 0.00015155452279631953, 0.00015228077911696064, 0.00015300734664433672, 0.00015373422657406955, 0.00015446142010254013, 0.0001551889284268914, 0.00015591675274503094, 0.00015664489425563382, 0.00015737335415814518, 0.0001581021336527831, 0.00015883123394054124, 0.00015956065622319167, 0.00016029040170328752, 0.00016102047158416576, 0.0001617508670699499, 0.00016248158936555283, 0.00016321263967667936, 0.0001639440192098292, 0.00016467572917229945, 0.00016540777077218754, 0.00016614014521839385, 0.00016687285372062448, 0.00016760589748939398, 0.00016833927773602812, 0.00016907299567266653, 0.00016980705251226557, 0.00017054144946860095, 0.00017127618775627054, 0.00017201126859069704, 0.0001727466931881308, 0.0001734824627656525, 0.00017421857854117584, 0.00017495504173345043, 0.00017569185356206438, 0.00017642901524744705, 0.00017716652801087187, 0.000177904393074459, 0.00017864261166117808, 0.000179381184994851, 0.00018012011430015463, 0.0001808594008026235, 0.0001815990457286526, 0.00018233905030550006, 0.00018307941576128995, 0.00018382014332501498, 0.0001845612342265392, 0.00018530268969660084, 0.00018604451096681493, 0.00018678669926967608, 0.00018752925583856127, 0.00018827218190773252, 0.0001890154787123396, 0.00018975914748842285, 0.0001905031894729159, 0.0001912476059036483, 0.0001919923980193484, 0.00019273756705964602, 0.0001934831142650752, 0.00019422904087707687, 0.0001949753481380017, 0.00019572203729111272, 0.00019646910958058818, 0.00019721656625152416, 0.0001979644085499374, 0.00019871263772276796, 0.00019946125501788206, 0.0002002102616840747, 0.00020095965897107244, 0.0002017094481295362, 0.00020245963041106387, 0.00020321020706819316, 0.0002039611793544043, 0.00020471254852412276, 0.00020546431583272194, 0.00020621648253652604, 0.00020696904989281266, 0.0002077220191598156, 0.0002084753915967276, 0.00020922916846370307, 0.0002099833510218608, 0.00021073794053328668, 0.00021149293826103657, 0.00021224834546913884, 0.00021300416342259724, 0.0002137603933873936, 0.00021451703663049059, 0.00021527409441983434, 0.00021603156802435736, 0.00021678945871398113, 0.0002175477677596189, 0.00021830649643317843, 0.00021906564600756467, 0.00021982521775668258, 0.0002205852129554398, 0.0002213456328797494, 0.00022210647880653263, 0.00022286775201372166, 0.00022362945378026226, 0.00022439158538611664, 0.00022515414811226608, 0.00022591714324071374, 0.00022668057205448735, 0.00022744443583764198, 0.00022820873587526275, 0.00022897347345346758, 0.0002297386498594099, 0.00023050426638128145, 0.00023127032430831493, 0.0002320368249307868, 0.00023280376954001996, 0.0002335711594283866, 0.0002343389958893108, 0.0002351072802172713, 0.00023587601370780433, 0.00023664519765750623, 0.0002374148333640362, 0.00023818492212611912, 0.00023895546524354823, 0.00023972646401718782, 0.00024049791974897606, 0.00024126983374192767, 0.00024204220730013668, 0.00024281504172877914, 0.00024358833833411592, 0.00024436209842349535, 0.0002451363233053561, 0.0002459110142892297, 0.0002466861726857435, 0.00024746179980662326, 0.00024823789696469593, 0.00024901446547389243, 0.0002497915066492503, 0.00025056902180691654, 0.00025134701226415016, 0.0002521254793393252, 0.0002529044243519332, 0.00025368384862258604, 0.00025446375347301875, 0.00025524414022609214, 0.0002560250102057956, 0.00025680636473724973, 0.00025758820514670925, 0.00025837053276156556, 0.0002591533489103496, 0.0002599366549227345, 0.0002607204521295384, 0.0002615047418627271, 0.0002622895254554169, 0.0002630748042418772, 0.00026386057955753346, 0.00026464685273896955, 0.0002654336251239309, 0.000266220898051327, 0.0002670086728612342, 0.0002677969508948984, 0.00026858573349473793, 0.0002693750220043461, 0.0002701648177684939, 0.00027095512213313317, 0.0002717459364453987, 0.0002725372620536115, 0.0002733291003072812, 0.000274121452557109, 0.00027491432015499016, 0.0002757077044540171, 0.0002765016068084817, 0.0002772960285738784, 0.00027809097110690685, 0.00027888643576547443, 0.0002796824239086992, 0.0002804789368969127, 0.00028127597609166246, 0.0002820735428557148, 0.0002828716385530577, 0.0002836702645489034, 0.0002844694222096913, 0.0002852691129030904, 0.0002860693379980023, 0.00028687009886456394, 0.00028767139687415006, 0.00028847323339937624, 0.00028927560981410153, 0.00029007852749343113, 0.00029088198781371916, 0.0002916859921525715, 0.00029249054188884826, 0.00029329563840266683, 0.0002941012830754045, 0.000294907477289701, 0.00029571422242946155, 0.0002965215198798594, 0.0002973293710273386, 0.0002981377772596168, 0.000298946739965688, 0.000299756260535825, 0.0003005663403615826, 0.00030137698083579996, 0.0003021881833526035, 0.0003029999493074097, 0.00030381228009692757, 0.00030462517711916167, 0.00030543864177341474, 0.0003062526754602904, 0.000307067279581696, 0.0003078824555408451, 0.00030869820474226057, 0.000309514528591777, 0.0003103314284965436, 0.00031114890586502695, 0.0003119669621070137, 0.0003127855986336132, 0.0003136048168572605, 0.00031442461819171873, 0.00031524500405208215, 0.00031606597585477874, 0.00031688753501757296, 0.00031770968295956846, 0.0003185324211012109, 0.0003193557508642905, 0.0003201796736719451, 0.0003210041909486625, 0.00032182930412028347, 0.00032265501461400443, 0.0003234813238583802, 0.00032430823328332656, 0.0003251357443201233, 0.0003259638584014166, 0.00032679257696122214, 0.00032762190143492757, 0.0003284518332592953, 0.0003292823738724652, 0.00033011352471395744, 0.0003309452872246753, 0.0003317776628469076, 0.00033261065302433166, 0.00033344425920201615, 0.00033427848282642346, 0.0003351133253454128, 0.0003359487882082427, 0.00033678487286557384, 0.0003376215807694718, 0.0003384589133734098, 0.00033929687213227135, 0.00034013545850235304, 0.00034097467394136736, 0.00034181451990844525, 0.000342654997864139, 0.0003434961092704249, 0.00034433785559070604, 0.00034518023828981496, 0.00034602325883401644, 0.0003468669186910103, 0.000347711219329934, 0.00034855616222136544, 0.0003494017488373257, 0.00035024798065128184, 0.0003510948591381495, 0.0003519423857742957, 0.00035279056203754163, 0.0003536393894071653, 0.0003544888693639043, 0.0003553390033899586, 0.00035618979296899323, 0.00035704123958614096, 0.00035789334472800517, 0.00035874610988266244, 0.0003595995365396654, 0.00036045362619004545, 0.00036130838032631543, 0.00036216380044247243, 0.0003630198880340004, 0.0003638766445978731, 0.0003647340716325566, 0.0003655921706380123, 0.0003664509431156993, 0.0003673103905685774, 0.00036817051450110987, 0.0003690313164192659, 0.0003698927978305237, 0.0003707549602438729, 0.00037161780516981757, 0.0003724813341203787, 0.00037334554860909714, 0.00037421045015103633, 0.0003750760402627848, 0.0003759423204624592, 0.0003768092922697068, 0.00037767695720570843, 0.0003785453167931811, 0.00037941437255638067, 0.00038028412602110473, 0.00038115457871469534, 0.0003820257321660416, 0.0003828975879055825, 0.00038377014746530973, 0.00038464341237877023, 0.00038551738418106905, 0.0003863920644088721, 0.0003872674546004088, 0.0003881435562954749, 0.0003890203710354351, 0.0003898979003632259, 0.00039077614582335845, 0.00039165510896192095, 0.0003925347913265816, 0.0003934151944665914, 0.0003942963199327867, 0.000395178169277592, 0.00039606074405502283, 0.0003969440458206884, 0.0003978280761317941, 0.0003987128365471446, 0.0003995983286271464, 0.00040048455393381066, 0.0004013715140307557, 0.0004022592104832101, 0.00040314764485801504, 0.00040403681872362745, 0.0004049267336501224, 0.00040581739120919595, 0.00040670879297416803, 0.000407600940519985, 0.00040849383542322236, 0.00040938747926208763, 0.00041028187361642304, 0.0004111770200677082, 0.0004120729201990629, 0.00041296957559524986, 0.0004138669878426774, 0.0004147651585294021, 0.0004156640892451319, 0.00041656378158122834, 0.00041746423713070964, 0.00041836545748825336, 0.00041926744425019904, 0.000420170199014551, 0.0004210737233809812, 0.0004219780189508317, 0.0004228830873271177, 0.00042378893011452997, 0.00042469554891943784, 0.00042560294534989187, 0.00042651112101562647, 0.00042742007752806277, 0.0004283298165003113, 0.00042924033954717467, 0.0004301516482851505, 0.00043106374433243393, 0.0004319766293089205, 0.00043289030483620875, 0.00043380477253760315, 0.0004347200340381167, 0.0004356360909644736, 0.0004365529449451123, 0.0004374705976101877, 0.00043838905059157446, 0.0004393083055228694, 0.00044022836403939425, 0.00044114922777819854, 0.00044207089837806224, 0.00044299337747949843, 0.00044391666672475617, 0.00044484076775782314, 0.0004457656822244284, 0.00044669141177204515, 0.00044761795804989347, 0.000448545322708943, 0.0004494735074019158, 0.0004504025137832889, 0.00045133234350929716, 0.000452262998237936, 0.00045319447962896407, 0.00045412678934390606, 0.0004550599290460554, 0.00045599390040047713, 0.00045692870507401024, 0.0004578643447352709, 0.00045880082105465497, 0.00045973813570434057, 0.0004606762903582911, 0.00046161528669225784, 0.00046255512638378274, 0.0004634958111122011, 0.0004644373425586442, 0.0004653797224060424, 0.00046632295233912745, 0.0004672670340444355, 0.0004682119692103097, 0.00046915775952690306, 0.000470104406686181, 0.0004710519123819243, 0.0004720002783097317, 0.00047294950616702264, 0.0004738995976530401, 0.0004748505544688531, 0.00047580237831735986, 0.00047675507090329, 0.0004777086339332077, 0.0004786630691155143, 0.00047961837816045094, 0.00048057456278010143, 0.0004815316246883949, 0.0004824895656011086, 0.0004834483872358706, 0.00048440809131216245, 0.00048536867955132213, 0.0004863301536765466, 0.00048729251541289445, 0.000488255766487289, 0.0004892199086285207, 0.0004901849435672499, 0.0004911508730360099, 0.0004921176987692092, 0.0004930854225031346, 0.0004940540459759537, 0.0004950235709277179, 0.000495993999100365, 0.0004969653322377217, 0.000497937572085507, 0.0004989107203913339, 0.0004998847789047132, 0.0005008597493770557, 0.0005018356335616749, 0.0005028124332137898, 0.0005037901500905277, 0.0005047687859509272, 0.0005057483425559403, 0.0005067288216684356, 0.0005077102250532008, 0.0005086925544769458, 0.0005096758117083052, 0.0005106599985178407, 0.0005116451166780443, 0.0005126311679633412, 0.0005136181541500919, 0.0005146060770165953, 0.0005155949383430916, 0.0005165847399117646, 0.000517575483506745, 0.0005185671709141124, 0.0005195598039218989, 0.000520553384320091, 0.0005215479139006329, 0.0005225433944574292, 0.0005235398277863471, 0.00052453721568522, 0.0005255355599538493, 0.000526534862394008, 0.0005275351248094429, 0.0005285363490058775, 0.0005295385367910145, 0.000530541689974539, 0.0005315458103681209, 0.0005325508997854177, 0.0005335569600420773, 0.0005345639929557406, 0.0005355720003460444, 0.000536580984034624, 0.0005375909458451162, 0.0005386018876031615, 0.0005396138111364075, 0.000540626718274511, 0.0005416406108491414, 0.0005426554906939826, 0.0005436713596447366, 0.0005446882195391259, 0.0005457060722168958, 0.0005467249195198179, 0.0005477447632916921, 0.00054876560537835, 0.0005497874476276572, 0.0005508102918895161, 0.0005518341400158689, 0.0005528589938606999, 0.0005538848552800388, 0.0005549117261319627, 0.0005559396082765994, 0.0005569685035761301, 0.000557998413894792, 0.0005590293410988809, 0.0005600612870567541, 0.0005610942536388333, 0.000562128242717607, 0.0005631632561676335, 0.0005641992958655435, 0.0005652363636900427, 0.0005662744615219149, 0.0005673135912440246, 0.0005683537547413195, 0.0005693949539008334, 0.0005704371906116891, 0.0005714804667651008, 0.0005725247842543772, 0.0005735701449749239, 0.0005746165508242464, 0.0005756640037019526, 0.0005767125055097559, 0.0005777620581514773, 0.0005788126635330491, 0.0005798643235625164, 0.0005809170401500412, 0.0005819708152079038, 0.0005830256506505066, 0.0005840815483943762, 0.0005851385103581664, 0.000586196538462661, 0.0005872556346307764, 0.000588315800787564, 0.0005893770388602139, 0.0005904393507780565, 0.0005915027384725659, 0.0005925672038773628, 0.0005936327489282165, 0.0005946993755630484, 0.0005957670857219342, 0.0005968358813471069, 0.0005979057643829596, 0.000598976736776048, 0.0006000488004750933, 0.0006011219574309847, 0.0006021962095967826, 0.0006032715589277209, 0.0006043480073812099, 0.0006054255569168391, 0.0006065042094963798, 0.0006075839670837879, 0.0006086648316452068, 0.0006097468051489696, 0.0006108298895656026, 0.0006119140868678275, 0.0006129993990305642, 0.0006140858280309336, 0.0006151733758482607, 0.0006162620444640766, 0.0006173518358621217, 0.0006184427520283485, 0.0006195347949509241, 0.000620627966620233, 0.0006217222690288799, 0.0006228177041716924, 0.0006239142740457239, 0.0006250119806502558, 0.0006261108259868011, 0.0006272108120591063, 0.0006283119408731544, 0.0006294142144371682, 0.000630517634761612, 0.0006316222038591952, 0.0006327279237448748, 0.0006338347964358578, 0.0006349428239516043, 0.0006360520083138303, 0.00063716235154651, 0.0006382738556758791, 0.0006393865227304369, 0.0006405003547409496, 0.000641615353740453, 0.0006427315217642545, 0.0006438488608499369, 0.0006449673730373604, 0.0006460870603686656, 0.0006472079248882762, 0.0006483299686429017, 0.0006494531936815401, 0.0006505776020554808, 0.0006517031958183073, 0.0006528299770258998, 0.0006539579477364379, 0.0006550871100104036, 0.0006562174659105838, 0.0006573490175020732, 0.0006584817668522768, 0.000659615716030913, 0.0006607508671100158, 0.0006618872221639383, 0.0006630247832693547, 0.0006641635525052633, 0.0006653035319529894, 0.0006664447236961879, 0.000667587129820846, 0.000668730752415286, 0.0006698755935701678, 0.0006710216553784923, 0.0006721689399356033, 0.0006733174493391907, 0.0006744671856892933, 0.0006756181510883012, 0.0006767703476409588, 0.0006779237774543676, 0.0006790784426379885, 0.0006802343453036451, 0.000681391487565526, 0.0006825498715401879, 0.0006837094993465578, 0.0006848703731059365, 0.0006860324949420007, 0.000687195866980806, 0.0006883604913507894, 0.0006895263701827724, 0.0006906935056099637, 0.0006918618997679614, 0.0006930315547947565, 0.000694202472830735, 0.000695374656018681, 0.0006965481065037795, 0.0006977228264336187, 0.0006988988179581931, 0.0007000760832299064, 0.0007012546244035734, 0.000702434443636424, 0.0007036155430881046, 0.0007047979249206821, 0.0007059815912986456, 0.0007071665443889098, 0.0007083527863608172, 0.0007095403193861414, 0.0007107291456390894, 0.0007119192672963049, 0.00071311068653687, 0.0007143034055423089, 0.0007154974264965906, 0.0007166927515861308, 0.0007178893829997955, 0.0007190873229289034, 0.0007202865735672286, 0.0007214871371110035, 0.0007226890157589211, 0.0007238922117121383, 0.0007250967271742786, 0.0007263025643514344, 0.0007275097254521698, 0.0007287182126875238, 0.0007299280282710126, 0.0007311391744186326, 0.000732351653348863, 0.0007335654672826682, 0.0007347806184435014, 0.0007359971090573064, 0.0007372149413525211, 0.0007384341175600797, 0.0007396546399134155, 0.0007408765106484642, 0.0007420997320036657, 0.0007433243062199675, 0.0007445502355408276, 0.0007457775222122164, 0.0007470061684826203, 0.0007482361766030438, 0.0007494675488270129, 0.0007507002874105771, 0.0007519343946123127, 0.0007531698726933251, 0.000754406723917252, 0.0007556449505502656, 0.0007568845548610761, 0.0007581255391209336, 0.0007593679056036311, 0.0007606116565855078, 0.0007618567943454508, 0.000763103321164899, 0.0007643512393278449, 0.0007656005511208376, 0.0007668512588329858, 0.0007681033647559604, 0.0007693568711839969, 0.0007706117804138988, 0.0007718680947450397, 0.0007731258164793665, 0.0007743849479214017, 0.0007756454913782465, 0.0007769074491595834, 0.0007781708235776789, 0.0007794356169473864, 0.0007807018315861485, 0.0007819694698140005, 0.0007832385339535723, 0.0007845090263300918, 0.0007857809492713872, 0.0007870543051078898, 0.0007883290961726371, 0.0007896053248012749, 0.0007908829933320608, 0.0007921621041058663, 0.0007934426594661797, 0.0007947246617591091, 0.0007960081133333848, 0.0007972930165403624, 0.0007985793737340251, 0.0007998671872709866, 0.000801156459510494, 0.0008024471928144305, 0.0008037393895473179, 0.0008050330520763197, 0.0008063281827712434, 0.0008076247840045435, 0.0008089228581513244, 0.0008102224075893427, 0.0008115234346990103, 0.0008128259418633969, 0.0008141299314682332, 0.0008154354059019128, 0.0008167423675554956, 0.0008180508188227104, 0.0008193607620999578, 0.0008206721997863122, 0.0008219851342835255, 0.0008232995679960291, 0.0008246155033309373, 0.0008259329426980492, 0.0008272518885098524, 0.0008285723431815248, 0.0008298943091309382, 0.0008312177887786602, 0.0008325427845479576, 0.0008338692988647988, 0.0008351973341578566, 0.0008365268928585111, 0.000837857977400852, 0.0008391905902216819, 0.0008405247337605188, 0.0008418604104595983, 0.0008431976227638775, 0.0008445363731210368, 0.0008458766639814827, 0.0008472184977983511 ];
  //const DESIGN_BOUNDS = new Bounds3( -4.199999999999999, -50, -53, 203, 0, 53 );
  const ONE_LITER_BOUNDS = new Bounds3( -0.16992790071023234, -0.024028854615847122, -0.06537425708779816, 0.08564844020659367, 0.0376449728254719, 0.06537425708779816 );

  const ONE_LITER_ACTUAL_VOLUME = DESIGN_ACTUAL_VOLUME * ONE_LITER_SCALE_MULTIPLIER * ONE_LITER_SCALE_MULTIPLIER * ONE_LITER_SCALE_MULTIPLIER;

  class Boat extends Mass {
    /**
     * @param {Engine} engine
     * @param {Property.<number>} blockWidthProperty
     * @param {Object} config
     */
    constructor( engine, blockWidthProperty, config ) {

      const displacementVolumeProperty = new NumberProperty( 0.005 );

      const boatVertices = Boat.getIntersectionVertices( blockWidthProperty.value / 2, displacementVolumeProperty.value * 1000 );
      const volume = ONE_LITER_ACTUAL_VOLUME * displacementVolumeProperty.value * 1000;

      config = merge( {
        body: engine.createFromVertices( boatVertices ),
        shape: Shape.polygon( boatVertices ),
        volume: volume,
        canRotate: false

        // material
      }, config );

      assert && assert( !config.canRotate );

      super( engine, config );

      // Update the shape when the block width or displacement changes
      Property.multilink( [ blockWidthProperty, displacementVolumeProperty ], ( blockWidth, displacementVolume ) => {
        const vertices = Boat.getIntersectionVertices( blockWidth / 2, displacementVolume * 1000 );
        const volume = ONE_LITER_ACTUAL_VOLUME * displacementVolume * 1000;

        engine.updateFromVertices( this.body, vertices );
        this.shapeProperty.value = Shape.polygon( vertices );
        this.volumeProperty.value = volume;

        this.bodyOffsetProperty.value = Utils.centroidOfPolygon( vertices ).negated();
        this.writeData();
      } );

      // @public {Property.<number>}
      this.displacementVolumeProperty = displacementVolumeProperty;

      // @public {Property.<number>}
      this.liquidVolumeProperty = new NumberProperty( 0 );

      // @public {Property.<number>} - The y coordinate of the main liquid level in the boat (relative to interiorSize.minY)
      this.liquidYProperty = new InterpolatedProperty( 0, {
        interpolate: InterpolatedProperty.interpolateNumber
      } );

      // @private {number} - Amount of volume displaced by the boat in the step
      this.stepVolume = 0;

      // @private {number} - How to multiply our one-liter size up to the model coordinates
      this.stepMultiplier = 0;

      // @public {THREE.Group}
      this.intersectionGroup = new THREE.Group();
      const intersectionMesh = new THREE.Mesh( Boat.getPrimaryGeometry( 1 ), new THREE.MeshLambertMaterial() );
      this.intersectionGroup.add( intersectionMesh );
    }

    /**
     * Steps forward in time.
     * @public
     * @override
     *
     * @param {number} dt
     * @param {number} interpolationRatio
     */
    step( dt, interpolationRatio ) {
      super.step( dt, interpolationRatio );

      this.liquidYProperty.setRatio( interpolationRatio );
    }
    /**
     * Returns whether this is a boat (as more complicated handling is needed in this case).
     * @public
     * @override
     *
     * @returns {boolean}
     */
    isBoat() {
      return true;
    }

    updateStepInformation() {
      // TODO: see if we can extend cuboid
      this.engine.bodyGetStepMatrixTransform( this.body, this.stepMatrix );

      const xOffset = this.stepMatrix.m02();
      const yOffset = this.stepMatrix.m12();

      this.stepVolume = this.displacementVolumeProperty.value;
      this.stepMultiplier = Math.pow( this.stepVolume / 0.001, 1 / 3 );

      this.stepX = xOffset;
      this.stepBottom = yOffset + this.stepMultiplier * ONE_LITER_BOUNDS.minY;
      this.stepTop = yOffset + this.stepMultiplier * ONE_LITER_BOUNDS.maxY;
    }

    /**
     * If there is an intersection with the ray and this mass, the t-value (distance the ray would need to travel to
     * reach the intersection, e.g. ray.position + ray.distance * t === intersectionPoint) will be returned. Otherwise
     * if there is no intersection, null will be returned.
     * @public
     * @override
     *
     * @param {Ray3} ray
     * @param {boolean} isTouch
     * @returns {number|null}
     */
    intersect( ray, isTouch ) {
      const scale = Math.pow( this.displacementVolumeProperty.value / 0.001, 1 / 3 );
      // TODO: somewhat borrowed with Bottle, let's combine
      const translation = this.matrix.translation;
      const adjustedPosition = ray.position.minusXYZ( translation.x, translation.y, 0 ).dividedScalar( scale );

      const raycaster = new THREE.Raycaster( ThreeUtils.vectorToThree( adjustedPosition ), ThreeUtils.vectorToThree( ray.direction ) );
      const intersections = [];
      raycaster.intersectObject( this.intersectionGroup, true, intersections );

      return intersections.length ? intersections[ 0 ].distance * scale : null;
    }

    /**
     * Returns the cumulative displaced volume of this object up to a given y level.
     * @public
     * @override
     *
     * Assumes step information was updated.
     *
     * @param {number} liquidLevel
     * @returns {number}
     */
    getDisplacedArea( liquidLevel ) {
      const bottom = this.stepBottom;
      const top = this.stepTop;

      if ( liquidLevel < bottom || liquidLevel > top ) {
        return 0;
      }

      const ratio = ( liquidLevel - bottom ) / ( top - bottom );

      return Mass.evaluatePiecewiseLinear( ONE_LITER_DISPLACED_AREAS, ratio );
    }

    /**
     * Returns the displaced volume of this object up to a given y level, assuming a y value for the given liquid level.
     * @public
     * @override
     *
     * Assumes step information was updated.
     *
     * @param {number} liquidLevel
     * @returns {number}
     */
    getDisplacedVolume( liquidLevel ) {
      const bottom = this.stepBottom;
      const top = this.stepTop;

      if ( liquidLevel <= bottom ) {
        return 0;
      }
      else if ( liquidLevel >= top ) {
        return this.displacementVolumeProperty.value;
      }
      else {
        const ratio = ( liquidLevel - bottom ) / ( top - bottom );

        return Mass.evaluatePiecewiseLinear( ONE_LITER_DISPLACED_VOLUMES, ratio );
      }
    }

    /**
     * TODO: doc. Uses liquid compensation
     * @public
     * @override
     *
     * @param {number} liquidLevel
     * @returns {number}
     */
    getDisplacedBuoyantVolume( liquidLevel ) {
      // TODO: yikes! Imagine boat with liquid with things floating in it. figure out.
      // TODO: NOPE NOPE NOPE NOPE NOPE NOPE NOPE this isn't right
      return 0; // TODO:
    }

    reset() {
      this.displacementVolumeProperty.reset();
      this.liquidVolumeProperty.reset();
      this.liquidYProperty.reset();

      super.reset();
    }

    static getHeightRatioFromDesignY( y ) {
      return Utils.linear( -BOAT_HEIGHT, 0, 0, 1, y );
    }

    /**
     * Returns the control point net for a cubic bezier curve for a given height ratio (0=top, 1=bottom) and whether it
     * is on the inside or outside surface of the boat.
     * @public
     *
     * @param {number} heightRatio
     * @param {boolean} isInside
     * @returns {Array.<Vector2>}
     */
    static getControlPoints( heightRatio, isInside ) {
      const v0 = new Vector2( 0, 0 );
      const v1 = new Vector2( 50, 50 );
      const v2 = new Vector2( 150, 50 );
      const v3 = new Vector2( 200, 40 );

      const ratio = Math.pow( heightRatio, 1 / 2 );
      const oppositeRatio = 1 - ratio;

      v0.x += 50 * oppositeRatio;
      v1.x += 60 * oppositeRatio;

      v1.y += -20 * oppositeRatio;
      v2.y += -15 * oppositeRatio;
      v3.y += -5 * oppositeRatio;

      if ( !isInside ) {
        v0.x += -( 1.4 + 0.5 * oppositeRatio ) * OUTSIDE;

        v1.x += -0.9 * OUTSIDE;
        v1.y += 0.9 * OUTSIDE;

        v2.y += OUTSIDE;

        v3.x += OUTSIDE;
        v3.y += ( 0.9 - 0.1 * ratio ) * OUTSIDE;
      }

      return [ v0, v1, v2, v3 ];
    }

    /**
     * Returns the XY model coordinates for intersection with a cuboid block with the given half-width.
     * @public
     *
     * @param {number} blockHalfWidth - in model coordinates
     * @param {number} liters - the number of liters of the boat's displacement
     * @returns {Array.<Vector2>}
     */
    static getIntersectionVertices( blockHalfWidth = 0, liters = 1 ) {
      const scale = Math.pow( liters, 1 / 3 ) * ONE_LITER_SCALE_MULTIPLIER;
      const frontSamples = 30;
      const insideSamples = 40;

      const outsideBottomY = -BOAT_HEIGHT;
      const insideBottomY = -BOAT_HEIGHT + OUTSIDE;

      const outsideBottomPoints = Boat.getControlPoints( 1, false );
      const outsideTopPoints = Boat.getControlPoints( 0, false );
      const insideTopPoints = Boat.getControlPoints( 1, true );
      const insideBottomPoints = Boat.getControlPoints( Boat.getHeightRatioFromDesignY( insideBottomY ), true );

      const points = [];

      if ( blockHalfWidth < insideTopPoints[ 3 ].y * scale ) {
        points.push( new Vector2( insideBottomPoints[ 3 ].x, insideBottomY ) );
      }
      points.push( new Vector2( insideTopPoints[ 3 ].x, 0 ) );
      points.push( new Vector2( outsideTopPoints[ 3 ].x, 0 ) );
      points.push( new Vector2( outsideBottomPoints[ 3 ].x, outsideBottomY ) );
      _.range( 0, frontSamples ).forEach( sample => {
        const y = outsideBottomY + BOAT_HEIGHT * sample / ( frontSamples - 1 );
        const x = Boat.getControlPoints( Boat.getHeightRatioFromDesignY( y ), false )[ 0 ].x;
        points.push( new Vector2( x, y ) );
      } );
      // points.push( new Vector2( insideTopPoints[ 0 ].x, 0 ) );

      const interiorPoints = [];

      _.range( 0, insideSamples ).forEach( sample => {
        const y = ( -BOAT_HEIGHT + OUTSIDE ) * sample / ( insideSamples - 1 );
        const controlPoints = Boat.getControlPoints( Boat.getHeightRatioFromDesignY( y ), true );

        const cubic = new phet.kite.Cubic( ...controlPoints );

        const p0 = controlPoints[ 0 ];
        const p1 = controlPoints[ 1 ];
        const p2 = controlPoints[ 2 ];
        const p3 = controlPoints[ 3 ];

        const a = -p0.y + 3 * p1.y - 3 * p2.y + p3.y;
        const b = 3 * p0.y - 6 * p1.y + 3 * p2.y;
        const c = -3 * p0.y + 3 * p1.y;
        const d = p0.y - blockHalfWidth / scale;

        const ts = phet.dot.Utils.solveCubicRootsReal( a, b, c, d );
        ts.forEach( t => {
          if ( t >= 0 && t <= 1 ) {
            const xz = cubic.positionAt( t );
            interiorPoints.push( new Vector2( xz.x, y ) );
          }
        } );
      } );

      const fullPoints = points.concat( _.sortBy( interiorPoints, point => point.x ) );

      return fullPoints.map( designPoint => Boat.designToModel( designPoint.toVector3(), liters ).toVector2() );
    }

    static getSegmentsFromControlPoints( points ) {
      const flip = p => p.componentTimes( new Vector2( 1, -1 ) );

      return [
        new Cubic( ...points ),
        new Line( points[ 3 ], flip( points[ 3 ] ) ),
        new Cubic( ...points.slice().reverse().map( flip ) )
      ];
    }

    static getAreaFromControlPoints( points ) {
      return Math.abs( _.sum( Boat.getSegmentsFromControlPoints( points ).map( segment => segment.getSignedAreaFragment() ) ) );
    }

    static getDiscretizationFromControlPoints( points, quantity ) {
      return _.flatten( Boat.getSegmentsFromControlPoints( points ).map( segment => {
        return (
          segment instanceof Line ? [ 0 ] : _.range( 0, quantity ).map( n => n / quantity )
        ).map( t => segment.positionAt( t ) );
      } ) );
    }

    /**
     * Meant for mapping a raw number-based array of x,y,z position data from the construction coordinates to model
     * coordinates.
     * @private
     *
     * @param {number} point
     * @param {number} index
     * @returns {number}
     */
    static positionArrayMap( point, index ) {
      const mod = index % 3;

      // x
      if ( mod === 0 ) {
        point -= DESIGN_CENTROID.x;
      }

      // y
      if ( mod === 1 ) {
        point -= DESIGN_CENTROID.y;
      }

      return point * ONE_LITER_SCALE_MULTIPLIER;
    }

    /**
     * Returns the model-space local coordinate for the boat, given a design-space point and number of liters.
     * @public
     *
     * @param {Vector3} point
     * @param {number} [liters]
     * @returns {Vector3}
     */
    static designToModel( point, liters = 1 ) {
      const scale = Math.pow( liters, 1 / 3 ) * ONE_LITER_SCALE_MULTIPLIER;
      return new Vector3(
        ( point.x - DESIGN_CENTROID.x ) * scale,
        ( point.y - DESIGN_CENTROID.y ) * scale,
        point.z * scale
      );
    }

    /**
     * Returns the one-liter model-coordinate main geometry for the bulk of the boat.
     * @public
     *
     * @returns {THREE.BufferGeometry}
     */
    static getPrimaryGeometry( liters = 1 ) {
      const positions = [];
      const normals = [];
      const uvs = [];

      const parametricSamples = 50;
      const heightSamples = 30;

      const getRows = isInside => _.range( 0, heightSamples ).map( sample => {
        const designY = ( -BOAT_HEIGHT + ( isInside ? OUTSIDE : 0 ) ) * sample / ( heightSamples - 1 );
        const controlPoints = Boat.getControlPoints( Boat.getHeightRatioFromDesignY( designY ), isInside );
        const cubic = new Cubic( ...controlPoints );
        return _.range( 0, parametricSamples ).map( pSample => {
          const t = pSample / ( parametricSamples - 1 );
          const point = cubic.positionAt( t );
          return Boat.designToModel( new Vector3( point.x, designY, point.y ), liters );
        } );
      } );
      const exteriorRows = getRows( false );
      const interiorRows = getRows( true );

      const normalizeRows = rows => rows.map( ( row, i ) => row.map( ( position, j ) => {
        // these will be null if they are not available
        const west = j > 0 ? row[ j - 1 ].minus( position ) : null;
        const east = j < row.length - 1 ? row[ j + 1 ].minus( position ) : null;
        const north = i > 0 ? rows[ i - 1 ][ j ].minus( position ) : null;
        const south = i < rows.length - 1 ? rows[ i + 1 ][ j ].minus( position ) : null;

        const cumulativeNormal = new Vector3( 0, 0, 0 );
        north && east && cumulativeNormal.add( north.cross( east ).normalize() );
        east && south && cumulativeNormal.add( east.cross( south ).normalize() );
        south && west && cumulativeNormal.add( south.cross( west ).normalize() );
        west && north && cumulativeNormal.add( west.cross( north ).normalize() );
        cumulativeNormal.normalize();
        return cumulativeNormal;
      } ) );

      const writeFlat = ( frontCurve, backCurve, normal ) => {
        assert && assert( frontCurve.length === backCurve.length );

        for ( let i = 0; i < frontCurve.length - 1; i++ ) {
          // Positions for our quad
          const pA = backCurve[ i ];
          const pB = backCurve[ i + 1 ];
          const pC = frontCurve[ i ];
          const pD = frontCurve[ i + 1 ];

          // UV coordinates for each side
          const uL = i / ( frontCurve.length - 1 );
          const uR = ( i + 1 ) / ( frontCurve.length - 1 );
          const vL = 0;
          const vR = 1; // TODO: better mapping for the boat bottom presumably?

          positions.push(
            pA.x, pA.y, pA.z,
            pC.x, pC.y, pC.z,
            pB.x, pB.y, pB.z,
            pC.x, pC.y, pC.z,
            pD.x, pD.y, pD.z,
            pB.x, pB.y, pB.z
          );
          normals.push(
            normal.x, normal.y, normal.z,
            normal.x, normal.y, normal.z,
            normal.x, normal.y, normal.z,
            normal.x, normal.y, normal.z,
            normal.x, normal.y, normal.z,
            normal.x, normal.y, normal.z
          );
          uvs.push(
            uL, vL,
            uL, vL,
            uR, vR,
            uL, vL,
            uR, vR,
            uR, vR,
          );
        }
      };

      const writeGrid = ( rows, normalRows, reverse ) => _.range( 0, rows.length - 1 ).forEach( i => _.range( 0, rows[ i ].length - 1 ).forEach( j => {
        // Positions for our quad
        const pA = rows[ i ][ j ];
        const pB = rows[ i + 1 ][ j ];
        const pC = rows[ i ][ j + 1 ];
        const pD = rows[ i + 1 ][ j + 1 ];

        // Normals for our quad
        const nA = normalRows[ i ][ j ];
        const nB = normalRows[ i + 1 ][ j ];
        const nC = normalRows[ i ][ j + 1 ];
        const nD = normalRows[ i + 1 ][ j + 1 ];

        // UV coordinates for each side
        const uL = j / ( rows[ i ].length - 1 );
        const uR = ( j + 1 ) / ( rows[ i ].length - 1 );
        const vL = i / ( rows.length - 1 );
        const vR = ( i + 1 ) / ( rows.length - 1 );

        // TODO: better way to factor this out?
        if ( reverse ) {
          positions.push(
            pA.x, pA.y, pA.z,
            pB.x, pB.y, pB.z,
            pC.x, pC.y, pC.z,
            pC.x, pC.y, pC.z,
            pB.x, pB.y, pB.z,
            pD.x, pD.y, pD.z
          );
          normals.push(
            nA.x, nA.y, nA.z,
            nB.x, nB.y, nB.z,
            nC.x, nC.y, nC.z,
            nC.x, nC.y, nC.z,
            nB.x, nB.y, nB.z,
            nD.x, nD.y, nD.z
          );
          uvs.push(
            uL, vL,
            uR, vR,
            uL, vL,
            uL, vL,
            uR, vR,
            uR, vR
          );
        }
        else {
          positions.push(
            pA.x, pA.y, pA.z,
            pC.x, pC.y, pC.z,
            pB.x, pB.y, pB.z,
            pC.x, pC.y, pC.z,
            pD.x, pD.y, pD.z,
            pB.x, pB.y, pB.z
          );
          normals.push(
            nA.x, nA.y, nA.z,
            nC.x, nC.y, nC.z,
            nB.x, nB.y, nB.z,
            nC.x, nC.y, nC.z,
            nD.x, nD.y, nD.z,
            nB.x, nB.y, nB.z
          );
          uvs.push(
            uL, vL,
            uL, vL,
            uR, vR,
            uL, vL,
            uR, vR,
            uR, vR,
          );
        }
      } ) );

      const flipZVector = new Vector3( 1, 1, -1 );
      const flipRow = row => row.map( v => v.componentTimes( flipZVector ) );
      const negateRows = rows => rows.map( row => row.map( v => v.negated() ) );
      const flipRows = rows => rows.map( flipRow );

      const exteriorNormalRows = normalizeRows( exteriorRows );
      const interiorNormalRows = normalizeRows( interiorRows ); // TODO: we'll presumably need to reverse these

      // Z+ exterior side
      writeGrid( exteriorRows, negateRows( exteriorNormalRows ), true );

      // Z+ interior side
      writeGrid( interiorRows, interiorNormalRows, false );

      // Z- exterior side
      writeGrid( flipRows( exteriorRows ), flipRows( negateRows( exteriorNormalRows ) ), false );

      // Z- interior side
      writeGrid( flipRows( interiorRows ), flipRows( interiorNormalRows ), true );

      // Top of the boat bottom
      writeFlat( interiorRows[ interiorRows.length - 1 ], flipRow( interiorRows[ interiorRows.length - 1 ] ), new Vector3( 0, 1, 0 ) );

      // Bottom of the boat bottom
      writeFlat( flipRow( exteriorRows[ exteriorRows.length - 1 ] ), exteriorRows[ exteriorRows.length - 1 ], new Vector3( 0, -1, 0 ) );

      // Z+ gunwale
      writeFlat( exteriorRows[ 0 ], interiorRows[ 0 ], new Vector3( 0, 1, 0 ) );

      // Z- gunwale
      writeFlat( flipRow( interiorRows[ 0 ] ), flipRow( exteriorRows[ 0 ] ), new Vector3( 0, 1, 0 ) );

      // Stern gunwale
      const sternGunwaleRow = [
        interiorRows[ 0 ][ interiorRows[ 0 ].length - 1 ],
        exteriorRows[ 0 ][ exteriorRows[ 0 ].length - 1 ]
      ];
      writeFlat( sternGunwaleRow, flipRow( sternGunwaleRow ), new Vector3( 0, 1, 0 ) );

      // Stern interior
      const sternInteriorRow = interiorRows.map( row => row[ row.length - 1 ] );
      writeFlat( flipRow( sternInteriorRow ), sternInteriorRow, new Vector3( -1, 0, 0 ) );

      // Stern exterior
      const sternExteriorRow = exteriorRows.map( row => row[ row.length - 1 ] );
      writeFlat( sternExteriorRow, flipRow( sternExteriorRow ), new Vector3( 1, 0, 0 ) );

      const boatGeometry = new THREE.BufferGeometry();
      boatGeometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( positions ), 3 ) );
      boatGeometry.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( normals ), 3 ) );
      boatGeometry.addAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( uvs ), 2 ) );
      return boatGeometry;
    }

    static computeBoatData( samples = 1000 ) {
      const desiredVolume = 0.001;

      const discretizationPoints = 1000;

      let externalAreaSum = 0;
      let areaSum = 0;
      let weightedCentroidSum = new Vector3( 0, 0, 0 );
      const sliceAreas = [];
      const externalSliceAreas = [];
      const internalSliceAreas = [];
      const designBounds = Bounds3.NOTHING;
      _.range( 0, samples ).forEach( i => {
        // unit area times the multiplier
        const y = ( i / ( samples - 1 ) - 1 ) * BOAT_HEIGHT;
        const heightRatio = Boat.getHeightRatioFromDesignY( y );
        const externalControlPoints = Boat.getControlPoints( heightRatio, false );
        const internalControlPoints = Boat.getControlPoints( heightRatio, true );
        const externalArea = Boat.getAreaFromControlPoints( externalControlPoints );
        const internalArea = Boat.getAreaFromControlPoints( internalControlPoints );
        const externalCentroid = Utils.centroidOfPolygon( Boat.getDiscretizationFromControlPoints( externalControlPoints, discretizationPoints ) );
        const internalCentroid = Utils.centroidOfPolygon( Boat.getDiscretizationFromControlPoints( internalControlPoints, discretizationPoints ) );

        externalControlPoints.forEach( point => {
          designBounds.addCoordinates( point.x, y, point.y );
          designBounds.addCoordinates( point.x, y, -point.y );
        } );

        const hasInside = y > -BOAT_HEIGHT + OUTSIDE;

        let area = externalArea;
        let weightedCentroid = externalCentroid.timesScalar( externalArea );

        if ( hasInside ) {
          area -= internalArea;
          weightedCentroid = weightedCentroid.minus( internalCentroid.timesScalar( internalArea ) );
        }

        sliceAreas.push( area );
        externalSliceAreas.push( externalArea );
        if ( hasInside ) {
          internalSliceAreas.push( internalArea );
        }
        else {
          internalSliceAreas.push( 0 );
        }

        areaSum += area;
        externalAreaSum += externalArea;

        weightedCentroidSum = weightedCentroidSum.plus( new Vector3( weightedCentroid.x, y * area, 0 ) );
      } );
      const displacedVolume = externalAreaSum / samples * BOAT_HEIGHT;
      const actualVolume = areaSum / samples * BOAT_HEIGHT;
      const oneLiterMultiplier = Math.pow( displacedVolume / desiredVolume, -1 / 3 );

      const centroid = weightedCentroidSum.timesScalar( 1 / areaSum );

      const oneLiterBounds = new Bounds3(
        ( designBounds.minX - centroid.x ) * oneLiterMultiplier,
        ( designBounds.minY - centroid.y ) * oneLiterMultiplier,
        ( designBounds.minZ - centroid.z ) * oneLiterMultiplier,
        ( designBounds.maxX - centroid.x ) * oneLiterMultiplier,
        ( designBounds.maxY - centroid.y ) * oneLiterMultiplier,
        ( designBounds.maxZ - centroid.z ) * oneLiterMultiplier
      );

      const oneLiterHeight = BOAT_HEIGHT * oneLiterMultiplier;

      const oneLiterDisplacedAreas = externalSliceAreas.map( designArea => designArea * oneLiterMultiplier * oneLiterMultiplier );
      const oneLiterInternalAreas = internalSliceAreas.map( designArea => designArea * oneLiterMultiplier * oneLiterMultiplier );
      const oneLiterDisplacedCumulativeVolumes = [];
      const oneLiterInternalCumulativeVolumes = [];
      let cumulativeDisplacedArea = 0;
      oneLiterDisplacedAreas.forEach( area => {
        cumulativeDisplacedArea += area * oneLiterHeight / samples;
        oneLiterDisplacedCumulativeVolumes.push( cumulativeDisplacedArea );
      } );
      let cumulativeInternalArea = 0;
      oneLiterInternalAreas.forEach( area => {
        cumulativeInternalArea += area * oneLiterHeight / samples;
        oneLiterInternalCumulativeVolumes.push( cumulativeInternalArea );
      } );

      return `
  // NOTE: machine generated by copy( phet.densityBuoyancyCommon.Boat.computeBoatData() );
  // If any parameters about the bottle shape changes, this should be recomputed.
  const ONE_LITER_SCALE_MULTIPLIER = ${oneLiterMultiplier};
  const DESIGN_CENTROID = new Vector3( ${centroid.x}, ${centroid.y}, ${centroid.z} );
  //const DESIGN_DISPLACED_VOLUME = ${displacedVolume};
  const DESIGN_ACTUAL_VOLUME = ${actualVolume};
  //const ONE_LITER_HEIGHT = ${oneLiterHeight};
  const ONE_LITER_DISPLACED_AREAS = [ ${oneLiterDisplacedAreas.join( ', ' )} ];
  const ONE_LITER_DISPLACED_VOLUMES = [ ${oneLiterDisplacedCumulativeVolumes.join( ', ' )} ];
  //const ONE_LITER_INTERNAL_AREAS = [ ${oneLiterInternalAreas.join( ', ' )} ];
  //const ONE_LITER_INTERNAL_VOLUMES = [ ${oneLiterInternalCumulativeVolumes.join( ', ' )} ];
  //const DESIGN_BOUNDS = new Bounds3( ${designBounds.minX}, ${designBounds.minY}, ${designBounds.minZ}, ${designBounds.maxX}, ${designBounds.maxY}, ${designBounds.maxZ} );
  const ONE_LITER_BOUNDS = new Bounds3( ${oneLiterBounds.minX}, ${oneLiterBounds.minY}, ${oneLiterBounds.minZ}, ${oneLiterBounds.maxX}, ${oneLiterBounds.maxY}, ${oneLiterBounds.maxZ} );
`;
    }

    /**
     * Replaces the main page with a debug view of the bottle, for debugging various curves and properties.
     * @public
     *
     * phet.densityBuoyancyCommon.Boat.getDebugCanvas()
     */
    static getDebugCanvas() {
      const canvas = document.createElement( 'canvas' );
      const context = canvas.getContext( '2d' );

      const width = 800;
      const height = 400;

      const pixelRatio = window.devicePixelRatio || 1;
      canvas.width = width * pixelRatio;
      canvas.height = height * pixelRatio;
      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
      context.scale( pixelRatio, pixelRatio );

      const scale = width / 210;

      const mapX = x => ( x + 5 ) * scale;
      const mapY = y => -y * scale + height / 2;

      const cubic = points => {
        context.moveTo( mapX( points[ 0 ].x ), mapY( points[ 0 ].y ) );
        context.bezierCurveTo(
          mapX( points[ 1 ].x ), mapY( points[ 1 ].y ),
          mapX( points[ 2 ].x ), mapY( points[ 2 ].y ),
          mapX( points[ 3 ].x ), mapY( points[ 3 ].y )
        );
        context.moveTo( mapX( points[ 0 ].x ), mapY( -points[ 0 ].y ) );
        context.bezierCurveTo(
          mapX( points[ 1 ].x ), mapY( -points[ 1 ].y ),
          mapX( points[ 2 ].x ), mapY( -points[ 2 ].y ),
          mapX( points[ 3 ].x ), mapY( -points[ 3 ].y )
        );
      };

      const boatProfile = points => {
        cubic( points );
        context.moveTo( mapX( points[ 3 ].x ), mapY( points[ 3 ].y ) );
        context.lineTo( mapX( points[ 3 ].x ), mapY( -points[ 3 ].y ) );
      };

      context.strokeStyle = 'red';
      context.beginPath();
      boatProfile( Boat.getControlPoints( 1, false ) );
      context.stroke();

      context.strokeStyle = 'blue';
      context.beginPath();
      boatProfile( Boat.getControlPoints( 1, true ) );
      context.stroke();

      context.strokeStyle = 'green';
      context.beginPath();
      boatProfile( Boat.getControlPoints( 0, false ) );
      context.stroke();

      context.strokeStyle = 'magenta';
      context.beginPath();
      boatProfile( Boat.getControlPoints( 0, true ) );
      context.stroke();

      const numSections = 20;
      _.range( 0, numSections ).forEach( i => {
        const ix = 1 - i / ( numSections - 1 );
        const z = 0.06 * ix;

        context.strokeStyle = Color.MAGENTA.blend( Color.ORANGE, ix ).toCSS();
        context.beginPath();
        Boat.getIntersectionVertices( z ).forEach( ( point, index ) => {
          const method = index > 0 ? 'lineTo' : 'moveTo';
          context[ method ]( 600 + 1000 * point.x, 230 - 1000 * point.y );
        } );
        context.closePath();
        context.stroke();
      } );

      while ( document.body.childNodes[ 0 ] ) {
        document.body.removeChild( document.body.childNodes[ 0 ] );
      }
      document.body.appendChild( canvas );
      document.body.style.background = 'white';

      return canvas;
    }
  }

  return densityBuoyancyCommon.register( 'Boat', Boat );
} );
