// Copyright 2019, University of Colorado Boulder

/**
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */
define( require => {
  'use strict';

  // modules
  const densityBuoyancyCommon = require( 'DENSITY_BUOYANCY_COMMON/densityBuoyancyCommon' );
  const Mass = require( 'DENSITY_BUOYANCY_COMMON/common/model/Mass' );
  const merge = require( 'PHET_CORE/merge' );
  const Shape = require( 'KITE/Shape' );
  const Util = require( 'DOT/Util' );
  const Vector2 = require( 'DOT/Vector2' );
  const Vector3 = require( 'DOT/Vector3' );

  // constants
  const BODY_CORNER_RADIUS = 0.03;
  const CAP_CORNER_RADIUS = 0.03;
  const LIP_CORNER_RADIUS = 0.02;
  const CAP_RADIUS = 0.23;
  const LIP_RADIUS = 0.285;
  const NECK_RADIUS = 0.187;
  const FULL_RADIUS = 0.85;
  const BASE_TIP_RADIUS = 0.6;
  const BODY_RADIUS = FULL_RADIUS - BODY_CORNER_RADIUS;
  const CAP_LENGTH = 0.28;
  const GAP_LENGTH = 0.03;
  const LIP_LENGTH = LIP_CORNER_RADIUS * 2;
  const TAPER_LENGTH = 1.35;
  const BODY_LENGTH = 2.25;
  const BASE_SADDLE_LENGTH = 0.7;
  const BASE_TIP_LENGTH = 0.85;
  const CAP_BODY_LENGTH = CAP_LENGTH - CAP_CORNER_RADIUS;
  const CORNER_SEGMENTS = 8;
  const TAPER_SEGMENTS = 20;
  const BASE_SEGMENTS = 20;

  const LIP_START = CAP_CORNER_RADIUS + CAP_BODY_LENGTH + GAP_LENGTH;
  const LIP_END = LIP_START + LIP_LENGTH;
  const TAPER_START = CAP_CORNER_RADIUS + CAP_BODY_LENGTH + GAP_LENGTH + LIP_LENGTH;
  const TAPER_END = TAPER_START + TAPER_LENGTH;
  const BODY_START = TAPER_END + BODY_CORNER_RADIUS;
  const BODY_END = BODY_START + BODY_LENGTH;
  const BASE_START = CAP_CORNER_RADIUS + CAP_BODY_LENGTH + GAP_LENGTH + LIP_LENGTH + TAPER_LENGTH + BODY_CORNER_RADIUS + BODY_LENGTH + BODY_CORNER_RADIUS;
  const BASE_SADDLE = BASE_START + BASE_SADDLE_LENGTH;
  const BASE_TIP = BASE_START + BASE_TIP_LENGTH;

  // {Array.<Vector2>} - Each vector is (x,r)
  const BASE_SADDLE_CONTROL_POINTS = [
    new Vector2( BASE_START, FULL_RADIUS ),
    new Vector2( BASE_START + 0.5 * ( BASE_SADDLE - BASE_START ), FULL_RADIUS ),
    new Vector2( BASE_SADDLE, 0.5 * FULL_RADIUS ),
    new Vector2( BASE_SADDLE, 0 )
  ];
  const BASE_FIRST_TIP_CONTROL_POINTS = [
    new Vector2( BASE_START, FULL_RADIUS ),
    new Vector2( BASE_START + 0.5 * ( BASE_TIP - BASE_START ), FULL_RADIUS ),
    new Vector2( BASE_TIP, FULL_RADIUS + 0.4 * ( BASE_TIP_RADIUS - FULL_RADIUS ) ),
    new Vector2( BASE_TIP, BASE_TIP_RADIUS )
  ];
  const BASE_SECOND_TIP_CONTROL_POINTS = [
    new Vector2( BASE_TIP, BASE_TIP_RADIUS ),
    new Vector2( BASE_TIP, 0.5 * BASE_TIP_RADIUS ),
    new Vector2( BASE_SADDLE, 0.7 * BASE_TIP_RADIUS ),
    new Vector2( BASE_SADDLE, 0 )
  ];
  const TAPER_CONTROL_POINTS = [
    new Vector2( TAPER_START, NECK_RADIUS ),
    new Vector2( TAPER_START + 0.4 * ( TAPER_END - TAPER_START ), NECK_RADIUS ),
    new Vector2( TAPER_START + 0.2 * ( TAPER_END - TAPER_START ), FULL_RADIUS ),
    new Vector2( TAPER_END, FULL_RADIUS )
  ]; // TODO: old y was NECK_RADIUS + ( t * t * ( 3 - 2 * t ) ) * ( FULL_RADIUS - NECK_RADIUS )

  // NOTE: machine generated by copy( phet.densityBuoyancyCommon.Bottle.computeBottleData() );
  // If any parameters about the bottle shape changes, this should be recomputed.
  const TEN_LITER_SCALE_MULTIPLIER = 0.08542848511459937;
  const TEN_LITER_DISPLACED_AREAS = [ 0, 0.00025715516131294685, 0.0005105588297961702, 0.000760837344289354, 0.0010081603170452892, 0.0012526649540866785, 0.0014944173204829814, 0.0017335212333278445, 0.0019699724529265573, 0.0022038286317809723, 0.002435108849914719, 0.00266384012046547, 0.002890046350978753, 0.003113728343368816, 0.0033348962706828003, 0.003553569560241939, 0.0037697409733691237, 0.003983401149197222, 0.006306470877352133, 0.008462738081800895, 0.00994589696687577, 0.011173783515188324, 0.01225471523113571, 0.013236534452658228, 0.014145378091519943, 0.01499747887336314, 0.01580363598887548, 0.016571623942815188, 0.017307035867474962, 0.01801430851422623, 0.018696789462942044, 0.019357271402206472, 0.019998001389319457, 0.02062083073650208, 0.021227302100822437, 0.021818778679294368, 0.02239641733936119, 0.022961211609645114, 0.0235140097237812, 0.02405561166196208, 0.02458667023340183, 0.025107813280847144, 0.02561958802907981, 0.026122480672992665, 0.026616908915210225, 0.02710334578186153, 0.02758209015135156, 0.02805350958619256, 0.028517920943378725, 0.028975611988747405, 0.029426846018773878, 0.029871863099371034, 0.030310865837939873, 0.030744134205778303, 0.031171796571662032, 0.03159408383745565, 0.032011165255252785, 0.03242318773594773, 0.03283031452041981, 0.033232690565929694, 0.03363043696155438, 0.03402373492632, 0.034412671068877104, 0.034797342053431844, 0.0351779169509208, 0.035554442276692674, 0.035927063261487716, 0.03629585673442336, 0.03666090987587757, 0.03702231788871131, 0.037380166915947095, 0.037734538226652896, 0.03808550899683999, 0.03843315250827621, 0.03877753752365093, 0.039118715769019895, 0.039456802788476124, 0.03979182591845314, 0.04012383533791842, 0.040452931495511685, 0.04077912660122328, 0.041102517446051576, 0.041423126068188196, 0.04174100998191354, 0.04205624314393485, 0.04236885142099765, 0.04267888272548871, 0.04298638695667512, 0.043291409760576764, 0.04359399477906554, 0.04389418407546502, 0.0441920182938417, 0.044487536712030325, 0.04478077715706376, 0.045071775347143454, 0.04536055716531146, 0.045647192398192704, 0.04593169241634969, 0.046214085455648736, 0.0464944119594141, 0.046772714512862246, 0.04704899801258197, 0.047323331252650994, 0.04759570277877483, 0.047866184733503965, 0.04813476477689207, 0.048401507250021424, 0.04866641063975804, 0.04892950943391275, 0.04919085509818081, 0.04945043847973887, 0.04970829706601809, 0.04996446837009953, 0.05021896541562276, 0.05047180878353754, 0.05072302534106508, 0.05097263891058514, 0.0512206724068061, 0.05146714813589894, 0.051712087894477406, 0.05195551865396631, 0.05219745146660466, 0.05243790830414223, 0.05267690758451684, 0.05291447918700315, 0.05315063672275188, 0.0533853991769887, 0.053618785169814547, 0.05385081293978357, 0.05408150027803618, 0.05431086422017364, 0.054538914222326956, 0.05476569035001823, 0.054991195394623646, 0.05521544535980526, 0.0554384533573049, 0.05566024089517392, 0.0558808291097203, 0.05610022473974098, 0.05631843992644561, 0.05653550599448494, 0.05675142415183307, 0.056966208122318625, 0.05717988509368856, 0.05739244985949605, 0.057603940805368264, 0.05781435443127862, 0.05802370413266396, 0.05823202830912042, 0.05843935564076772, 0.05864573221947407, 0.05885116533585621, 0.05905569504805305, 0.059259323588414584, 0.059462087334111645, 0.05966398727115968, 0.059865055527064615, 0.06006529439539031, 0.06026472996718391, 0.060463369475238775, 0.060661226064272475, 0.060858326324161154, 0.06105466501132752, 0.061250269513529784, 0.06144514067495226, 0.06163929251906404, 0.06183274683220464, 0.062025498895137934, 0.06221756910884217, 0.06240896533676282, 0.06259969311620321, 0.06278977008035914, 0.06297919848168364, 0.06316798744085708, 0.06335615180695149, 0.06354369383537131, 0.06373062148537138, 0.06391694391068299, 0.064102676227488, 0.06428781305085252, 0.06447236660600522, 0.06465634998739471, 0.06483976024503742, 0.06502260696512971, 0.06520490071885658, 0.06538664319832699, 0.06556783953656291, 0.06574849673744315, 0.0659286262632603, 0.06610822283850727, 0.06628729669443155, 0.06646585255396782, 0.06664390045745897, 0.06682143598135959, 0.06699846719679034, 0.06717500016157975, 0.06735104015181914, 0.06752658587205693, 0.06770164394517438, 0.06787622384017317, 0.06805031765951253, 0.06822393601049664, 0.0683970810301893, 0.06856976123221196, 0.06874196896362554, 0.06891371353524385, 0.06908499696871309, 0.06925582617098301, 0.0694261958892202, 0.0695961121637197, 0.06976558281551816, 0.06993459836498232, 0.07010316881587171, 0.07027129957826551, 0.07043898204861021, 0.0706062250657838, 0.07077302910395222, 0.07093939937168102, 0.07110533055507098, 0.07127082737177602, 0.0714358945973495, 0.07160052691696613, 0.07176473187742485, 0.07192850426704371, 0.07209184825304024, 0.07225477003686141, 0.07241725767989592, 0.0725793216073444, 0.07274096328672323, 0.07290217741162586, 0.07306297267455208, 0.07322333669054183, 0.07338327979787732, 0.07354280281153788, 0.07370190028749529, 0.07386057806275098, 0.07401883068284063, 0.0741766637321738, 0.0743340717774817, 0.0744910601713136, 0.07464762345882403, 0.07480376684080071, 0.07495948478618761, 0.07511478238866308, 0.07526965407348243, 0.07542410476867531, 0.0755781335879201, 0.07573173134239751, 0.07588490903860687, 0.07603766161492034, 0.07618998578904627, 0.07634188651547809, 0.07649335970669761, 0.07664440497799334, 0.07679502427983699, 0.07694521741261605, 0.07709497515096732, 0.07724430826960148, 0.07739321161331215, 0.077541685274706, 0.07768972801750575, 0.07783733517673094, 0.07798451433720967, 0.07813126127709556, 0.07827757555953276, 0.07842345677719395, 0.07856890455722232, 0.07871391856581063, 0.07885849850925335, 0.07900264412930327, 0.07914635519557058, 0.07928963150396717, 0.07943247288309745, 0.07957487920086231, 0.07971685036566024, 0.07985838632318708, 0.07999948705177923, 0.08014015682854923, 0.08028038602127341, 0.08042018149015148, 0.08055954182320936, 0.08069847119026595, 0.08083696115851975, 0.0809750171791279, 0.08111264161340814, 0.08124982898120686, 0.08138658543183269, 0.08152290334556136, 0.08165879111976483, 0.08179424066649188, 0.08192925919100988, 0.0820638405990674, 0.08219799059292404, 0.08233170538450849, 0.08246498207646036, 0.0825978266751386, 0.08273023509037201, 0.08286220671003092, 0.08299374087692137, 0.08312483735093652, 0.08325549363707496, 0.08338571107721393, 0.08351548858165866, 0.08364482277643516, 0.08377371360738496, 0.08390215892099509, 0.08403015707204989, 0.0841577062511262, 0.08428480944672553, 0.08441145638329497, 0.08453765092758633, 0.08466338785451566, 0.08478866638826926, 0.08491348265699887, 0.08503783704787696, 0.08516172021502796, 0.08528513902963349, 0.0854080851051657, 0.08553055562319747, 0.08565254770658128, 0.08577405836160905, 0.08589508438377781, 0.08601562234890554, 0.08613566869166664, 0.08625522406027782, 0.08637427976404165, 0.08649283160987437, 0.0866108843454255, 0.08672842229948716, 0.08684545485965618, 0.08696197094160008, 0.0870779673258904, 0.08719344102847172, 0.08731972612406545, 0.08744529657118169, 0.08756989814026567, 0.08769351546931531, 0.08781614255885475, 0.08793775342519168, 0.08805834219606921, 0.08817788443811388, 0.08829635855475955, 0.08841375348699113, 0.0885300428718717, 0.08864519533190657, 0.08875928903696677, 0.0888724620548086, 0.08898477075455255, 0.0890962655714457, 0.08920697041712086, 0.08931690856245682, 0.0894260975284457, 0.08953456180442983, 0.08964229855397547, 0.0897493305792487, 0.08985566344390257, 0.0899613086220234, 0.09006627031106802, 0.09017055699087707, 0.09027417465344803, 0.09037713511323019, 0.09047943945777262, 0.0905811017479848, 0.09068212453135938, 0.09078251618676852, 0.09088228981842145, 0.09098145050780872, 0.09108000955699311, 0.09117798060522742, 0.09127537324892261, 0.09137220177791942, 0.09146848670467206, 0.0915642368340582, 0.09165948538440273, 0.09175424152015764, 0.09184854942303028, 0.09194242138986075, 0.09203591180818142, 0.09212905277241856, 0.09222189644414183, 0.09231451032776, 0.09240696888362848, 0.09249936461326584, 0.09259183270618061, 0.09268452979915964, 0.09277767683403526, 0.09287161528830103, 0.09296685794706581, 0.09306437381700067, 0.09316652531077661, 0.09341142499592413, 0.09362793252242155, 0.09379778886652325, 0.093948045322701, 0.09408614223087078, 0.09421547624004274, 0.09433795224025411, 0.09445477176822359, 0.09456675339228456, 0.09467448609290488, 0.09477841132912672, 0.09487887065825662, 0.09497613513659454, 0.09507042438557155, 0.09516191945973106, 0.09525077182396163, 0.09533710979391301, 0.09542104326818256, 0.09550266727814513, 0.09558206469942213, 0.0956593083562791, 0.09573446267823327, 0.0958075850207923, 0.09587872673053448, 0.09594793401295809, 0.09601524864629933, 0.09608070857374962, 0.09614434839866844, 0.09620619980172183, 0.09626629189461931, 0.09632465152197087, 0.09638130352038404, 0.0964362709420468, 0.09648957524865759, 0.09654123648051202, 0.09659127340447843, 0.0966397036441298, 0.0966865437946091, 0.09673180952443586, 0.09677551566598849, 0.09681767629637193, 0.09685830480987437, 0.09689741398293181, 0.09693501603270684, 0.09697112266994957, 0.0970057451472752, 0.09703889430274233, 0.0970705805995436, 0.0971008141623577, 0.09712960481100028, 0.09715696209084221, 0.09718289530089172, 0.09720741352032054, 0.09723052563232772, 0.09725224034645502, 0.09727256621995196, 0.09729151167674405, 0.09730908502601207, 0.09732529447936138, 0.09734014816654678, 0.0973536541513282, 0.09736582044516585, 0.097376655021588, 0.09738616582859982, 0.09739436080165911, 0.09740124787515274, 0.09740683499427963, 0.09741113012571036, 0.09741414126875975, 0.0974158764653013, 0.09741634381052336, 0.09741555146225361, 0.09741350765141511, 0.09741022069113779, 0.09740569898670823, 0.09739995104512711, 0.09739298548437822, 0.09738481104353482, 0.09737543659205035, 0.09736487113975352, 0.09735312384713234, 0.09734020403526474, 0.0973261211965707, 0.097310885005969, 0.09729450533199424, 0.09727699224879059, 0.09725835604873832, 0.09723860725567482, 0.097217756638771, 0.09719581522764478, 0.0971727943284949, 0.09714870554155171, 0.09712356077987669, 0.09709737229017786, 0.09707015267568916, 0.09704191492159928, 0.09701267242356228, 0.09698243901986457, 0.0969512290282572, 0.09691905728854756, 0.09688593921246694, 0.09685189084299217, 0.09681692892620913, 0.09678107100027672, 0.09674433550846559, 0.09670674194707114, 0.09666831106401681, 0.09662906512214985, 0.09658902822145336, 0.0965482271964167, 0.09650669594475646, 0.09646447502117092, 0.09642159820416212, 0.09637809208809331, 0.09633398041097332, 0.09628928495094854, 0.09624402584765587, 0.09619822186458613, 0.09615189058669078, 0.09610504856717961, 0.09605771143932458, 0.09600989400407123, 0.09596161030042054, 0.09591287366312949, 0.09586369677081392, 0.09581409168659165, 0.09576406989282865, 0.09571364232116304, 0.09566281937857332, 0.09561161097021183, 0.09556002651949806, 0.09550807498585392, 0.09545576488055216, 0.0954031042807259, 0.09535010084185065, 0.09529676180884784, 0.09524309402611164, 0.0951891039463724, 0.09513479763852428, 0.09508018079457976, 0.0950252587359502, 0.09497003641875118, 0.09491451843841069, 0.09485870903382287, 0.09480261209059211, 0.09474623114373525, 0.09468956937997443, 0.09463262963913356, 0.09457541441523386, 0.09451792585694543, 0.09446016576734695, 0.0944021356034265, 0.09434383647464181, 0.09428526914128274, 0.09422643401189688, 0.09416733114041898, 0.09410796022239569, 0.09404832059079599, 0.0939884112109155, 0.09392823067476991, 0.09386777719448523, 0.09380704859513338, 0.09374604230641317, 0.09368475535368441, 0.09362318434771959, 0.09356132547357747, 0.09349917447820337, 0.09343672665670216, 0.0933739768373512, 0.09331091936491483, 0.09324754808237277, 0.0931838563108109, 0.0931198368271722, 0.09305548183980386, 0.09299078296151635, 0.0929257311797496, 0.09286031682365822, 0.09279452952769406, 0.09272835819123186, 0.09266179093372277, 0.09259481504484474, 0.09252741692895285, 0.09245958204302378, 0.09239129482718078, 0.09232253862670586, 0.09225329560428208, 0.092183546640907, 0.09211327122368952, 0.09204244731833724, 0.09197105122372426, 0.09189905740536704, 0.091826438303958, 0.09175316411420138, 0.09167920252810784, 0.09160451843549837, 0.09152907357259137, 0.09145282610715266, 0.09137573014553402, 0.09129773514269736, 0.09121878519059391, 0.09113881815249668, 0.09105776460007817, 0.09097554649480154, 0.09089207553343409, 0.09080725104574701, 0.09072095728513332, 0.09063305988087396, 0.09054340110796398, 0.09045179344875189, 0.09035801061773865, 0.09026177469564053, 0.09016273706526053, 0.09006044901287437, 0.08995431411046283, 0.08984350615123707, 0.089726815771187, 0.08960233006623633, 0.08946664418865027, 0.0893123094168846, 0.0891122658941009, 0.08888476390322478, 0.08880093487668243, 0.0887226571547143, 0.08864755906022154, 0.08857466215152006, 0.08850344404021138, 0.08843355347963698, 0.08836475959447267, 0.088296895652999, 0.08822981621089253, 0.08816341835465083, 0.08809761705670895, 0.08803233409269533, 0.08796750643052315, 0.08790309095718074, 0.08783902212066015, 0.08777527631654293, 0.08771179791439615, 0.08764856616304839, 0.08758553612139955, 0.0875226871287908, 0.08745998668657581, 0.08739740839072462, 0.08733493040583606, 0.08727252673153961, 0.08721017358523243, 0.08714785328870031, 0.08708554002780547, 0.08702321260357761, 0.0869608555413779, 0.0868984417495089, 0.08683595700929357, 0.08677337627821352, 0.08671068024276925, 0.08664784701180171, 0.08658485889040862, 0.08652169082475002, 0.0864583235930209, 0.08639472066049715, 0.08633087106077295, 0.0862667364356078, 0.08620228533340954, 0.08613748049545866, 0.08607228396963859, 0.08600663123228595, 0.08594045178279436, 0.08587359338383571, 0.08580596366298444, 0.0857375797674539, 0.08566845380756974, 0.08559858257294799, 0.08552797337966547, 0.08545663637540443, 0.08538456314738367, 0.08531176540106775, 0.08523823487084758, 0.08516397267323042, 0.08508921881823696, 0.08502548516064638, 0.08496142347870618, 0.08489702265585959, 0.08483227186474585, 0.0847671682036008, 0.08470168836701202, 0.08463583418382405, 0.08456958714714757, 0.08450293778130172, 0.08443588120651728, 0.08436840330977602, 0.08430049430515853, 0.08423214438661136, 0.08416334365701618, 0.08409408214469807, 0.08402434990497223, 0.08395413708527699, 0.08388343955918309, 0.08381223810747343, 0.08374052989958015, 0.08366830254986965, 0.08359554811578246, 0.08352225574848474, 0.08344841924344762, 0.08337402350415858, 0.08329906778056825, 0.08322353826649279, 0.08314742616476209, 0.0830707227276155, 0.0829934199310646, 0.08291550786839405, 0.0828369801697478, 0.08275782839767977, 0.08267804189875703, 0.08259761407010226, 0.08251653626492376, 0.08243480046101309, 0.08235239879435328, 0.08226932707724131, 0.08218557121800389, 0.08210112621488291, 0.08201598813603725, 0.08193014373094218, 0.08184359170920716, 0.081756317636054, 0.08166832251628212, 0.0815795910066267, 0.08149012390893579, 0.08139990837473786, 0.08130894329437184, 0.08121721981678605, 0.08112472609209662, 0.08103146423651324, 0.0809374238372024, 0.08084260012852154, 0.08074698013028975, 0.08065056740510408, 0.08055335164980222, 0.08045532689735738, 0.08035648724507141, 0.08025682685416195, 0.08015633994845327, 0.08005502080921538, 0.07995286376527548, 0.07984986318382971, 0.0797460134696381, 0.07964130907104627, 0.07953574448318174, 0.07942931424626788, 0.07932201294045713, 0.07921383518107221, 0.07910477937425663, 0.07899483212601005, 0.07888399229963393, 0.07877225533839961, 0.07865961536673631, 0.0785460717685424, 0.07843160801120534, 0.07831622757748816, 0.07819992494170887, 0.07808269244747898, 0.0779645247951375, 0.07784542041163507, 0.07772536870797381, 0.07760436736017139, 0.07748241585430193, 0.07735949764117815, 0.07723561640222121, 0.07711076755380607, 0.07698494073787292, 0.07685813614113365, 0.07673034332619526, 0.07660156252693535, 0.0764717832941002, 0.076341005884941, 0.0762092198023102, 0.07607642538999349, 0.075942612031292, 0.0758077802076481, 0.0756719191702276, 0.07553502951461476, 0.07539710564257848, 0.07525813249989705, 0.07511811782470072, 0.07497704834889594, 0.07483492487632411, 0.07469174151190074, 0.07454748347978207, 0.074402158446778, 0.07425575602040554, 0.07410826792506493, 0.07395969534863576, 0.07381002680714693, 0.07365926376660528, 0.07350739769322565, 0.07335442020343502, 0.07320033303967588, 0.07304512751838829, 0.07288879978889147, 0.07273133773634956, 0.07257274679103291, 0.07241301847442676, 0.07225213982131452, 0.07209011745907985, 0.07192694082592023, 0.07176260125461949, 0.0715971014872013, 0.07143043222450597, 0.07126258917374392, 0.07109356087655441, 0.07092335296449369, 0.07075195503153159, 0.07057936317974148, 0.07040556517545662, 0.07023056742725832, 0.07005435911755752, 0.06987693241837617, 0.06969828756681849, 0.06951841837840006, 0.06933731804042831, 0.0691549778838791, 0.06897140189510974, 0.06878657976114398, 0.06860050665489188, 0.06841317241364904, 0.06822458255840905, 0.0680347260538714, 0.06784359650932552, 0.06765118959604259, 0.06745750462244499, 0.06726253221957842, 0.06706626421081094, 0.0668687051690388, 0.06666984384233735, 0.06646967007433476, 0.06626819155215061, 0.06606539570260414, 0.06586127616374672, 0.06565582802534471, 0.06544905234730458, 0.06524093787187714, 0.06503147935611787, 0.06482067872299428, 0.06460852282459993, 0.06439501093202055, 0.06418014032778058, 0.06396389611032166, 0.06374628886926659, 0.06352730307908179, 0.06330693138926699, 0.06308518006526824, 0.06286202929345615, 0.06263749238798692, 0.06241155136313454, 0.06218420225556636, 0.06195544764334764, 0.06172527193937801, 0.06149368412649068, 0.061260664227753434, 0.061026224417216376, 0.06079034267578494, 0.060553032607562916, 0.060314271927643465, 0.06007407393239302, 0.05983241830261805, 0.05958931550215882, 0.05934475147868515, 0.05909872317136335, 0.058851244513152066, 0.05860228767610728, 0.058351868548676224, 0.05809997074899889, 0.057846591482589894, 0.05759174059383977, 0.05733539793305233, 0.05707756265612922, 0.05681823944310377, 0.05655741869778622, 0.056295090573091636, 0.05603125373865898, 0.055765904092182676, 0.05549905086317682, 0.05523066612610765, 0.054960752683486665, 0.05468930587656851, 0.05441632040883565, 0.054141790653685566, 0.05386571071984198, 0.053588074467337654, 0.053308881246258405, 0.053028114254097654, 0.052745768264761995, 0.05246183461296872, 0.0521763156671107, 0.05188919799010631, 0.05160047343292764, 0.051310133449774906, 0.051018168998633096, 0.05072457024166524, 0.05042932440757413, 0.05013242512224522, 0.04983387367930659, 0.0495336469929034, 0.04923172211230094, 0.048928122836012174, 0.048622812452534074, 0.048315771336258063, 0.048007015970038244, 0.0476964970895305, 0.04738424221793446, 0.04707019450196357, 0.046754380790673775, 0.04643674778973397, 0.046117306206764165, 0.04579602916469772, 0.04547289203176584, 0.045147882486533876, 0.044821005175205327, 0.0444922064297071, 0.044161476586780234, 0.043828796248686186, 0.04349414400896012, 0.04315749710987544, 0.04281883152642872, 0.04247812191272991, 0.04213534144211536, 0.04179046138094133, 0.041443448838876566, 0.04109427300840639, 0.04074292522295939, 0.04038934882066872, 0.0400335036761028, 0.03967538523326872, 0.03931491427604005, 0.03895209626128403, 0.038586848498505244, 0.03821913865745228, 0.03784895734025514, 0.03747620703048501, 0.03710085411809566, 0.03672284804397501, 0.03634213381670976, 0.035958652636607906, 0.03557234169605495, 0.03518313339776279, 0.03479095116801505, 0.03439572653808954, 0.03399740147211741, 0.03359584961324577, 0.03319104339968669, 0.032782832792723704, 0.03237114023800056, 0.03195589831327374, 0.031536945061378635, 0.031114178729410233, 0.03068747376940815, 0.030256686421695198, 0.02982168932720632, 0.029382332854985396, 0.028938405792234282, 0.02848979952574265, 0.028036253904778933, 0.027577586205949665, 0.02711357630915773, 0.026643980923839003, 0.026168532348368936, 0.025686933846378726, 0.0251988380304098, 0.024703966249442592, 0.024201865754851216, 0.023692139169291793, 0.023174320668440947, 0.022647883440735237, 0.022112220096481613, 0.021566698316350174, 0.021010538643646402, 0.020442913398400157, 0.019862849632106445, 0.019269211079891036, 0.018660655165424842, 0.018035659865742227, 0.01739239451101971, 0.016728632689056087, 0.016041602352930687, 0.01532797655424114, 0.014583339155423843, 0.013802117612030014, 0.012976557971919132, 0.01209588155140551, 0.011143876074506141, 0.010094425008469236, 0.00889970630851741, 0.00745142266007369, 0.005331758146719795, 0.003047038482961197, 0.002873495488298011, 0.002699227907765423, 0.0025242643877175664, 0.0023486311537485984, 0.002172327405528393, 0.001995361159536178, 0.0018177492659525037, 0.0016394847999633472, 0.001460556882767401, 0.0012809614690113382, 0.0011006544735387253, 0.0009196516688278312, 0.0007378577974671893, 0.0005552106696378144, 0.00037156865857837095, 0.00018673960496375932, 0 ];
  const TEN_LITER_DISPLACED_VOLUMES = [ 0, 3.734623897962131e-8, 1.1149389354494928e-7, 2.2198910250508174e-7, 3.684026371893983e-7, 5.503251951418144e-7, 7.673570684322101e-7, 0.0000010191136263234325, 0.0000013052096223541447, 0.0000016252681828450334, 0.0000019789152050785604, 0.0000023657805094126175, 0.0000027854973882602713, 0.000003237699250495333, 0.0000037220209824072223, 0.00000423810029168462, 0.000004785573834754531, 0.000005364076908579975, 0.000006279955739481578, 0.000007508985859706376, 0.000008953412808382721, 0.000010576163786174458, 0.0000123558967742759, 0.000014278217821254153, 0.000016332528798198198, 0.000018510589029370554, 0.000020805726188485286, 0.000023212397028335278, 0.000025725870583505397, 0.000028342060230992937, 0.0000310573655115467, 0.000033868591543679215, 0.00003677286978249488, 0.00003976760054625558, 0.000042850408190879045, 0.00004601911504723787, 0.000049271711456241024, 0.00005260633204739417, 0.000056021234637837566, 0.000059514793224574634, 0.00006308547661106258, 0.00006673184478137167, 0.00007045253719216518, 0.00007424626390942476, 0.00007811179566142622, 0.00008204797187328493, 0.0000860536753757562, 0.00009012784238011995, 0.00009426945511429823, 0.00009847753759799233, 0.00010275115208903586, 0.0001070893957096568, 0.00011149139500643681, 0.0001159563171857481, 0.00012048334809675793, 0.00012507170712214766, 0.00012972063822481355, 0.0001344294067032896, 0.0001391973015633256, 0.00014402363286258594, 0.0001489077282443109, 0.00015384894166989445, 0.00015884663967876845, 0.00016390020284875513, 0.00016900903631158253, 0.0001741725519543295, 0.00017939018275570646, 0.0001846613728521956, 0.00018998557904134804, 0.0001953622719468764, 0.00020079093470290878, 0.000206271062246152, 0.00021180216072146343, 0.00021738374691629612, 0.00022301534760440017, 0.0002286964970716193, 0.0002344267463840838, 0.00024020565057795122, 0.00024603277197679144, 0.000251907687492172, 0.00025782997580889826, 0.0002637992296685796, 0.0002698150450133975, 0.00027587702613824153, 0.0002819847880786175, 0.00028813794962661784, 0.00029433613653257547, 0.0003005789817936153, 0.00030686612503596177, 0.0003131972122238796, 0.0003195718954304238, 0.00032598983263132305, 0.00033245068750656413, 0.00033895412922969425, 0.00034549983216155866, 0.00035208747442195615, 0.000358716744265687, 0.0003653873315988804, 0.000372098930428316, 0.00037885124063429367, 0.00038564396828169714, 0.0003924768201465341, 0.00039934951299566766, 0.00040626176193247197, 0.00041321329253746995, 0.00042020382859907365, 0.0004272331032498491, 0.00043430084940261236, 0.00044140680497878977, 0.00044855071537408964, 0.00045573232465497015, 0.00046295138233213006, 0.00047020764336423373, 0.0004775008646013482, 0.00048483080588247946, 0.0004921972309485177, 0.0004995999070000398, 0.0005070386045654897, 0.0005145130974128012, 0.0005220231624753961, 0.000529568580603714, 0.0005371491342532933, 0.0005447646090705952, 0.0005524147933768891, 0.0005600994798327643, 0.0005678184630755361, 0.0005755715404997143, 0.0005833585122039764, 0.0005911791809357564, 0.0005990333520262681, 0.0006069208332807781, 0.0006148414338778525, 0.0006227949688147099, 0.000630781253493956, 0.0006388001056423834, 0.000646851344890982, 0.0006549347939943222, 0.0006630502787765674, 0.0006711976260405453, 0.0006793766643523328, 0.0006875872268272363, 0.0006958291467559945, 0.0007041022594224361, 0.0007124064040588232, 0.0007207414191412943, 0.0007291071487206715, 0.000737503436339474, 0.0007459301274856191, 0.0007543870732237368, 0.0007628741287836258, 0.0007713911560889342, 0.0007799380181221149, 0.0007885145836832013, 0.0007971207218964273, 0.000805756307169026, 0.0008144212140514282, 0.0008231153217598916, 0.0008318385098437648, 0.0008405906616415575, 0.0008493716615421873, 0.0008581813958435579, 0.000867019754705179, 0.000875886627525044, 0.000884781907678627, 0.0008937054886640018, 0.0009026572660158486, 0.0009116371384328433, 0.0009206450039282944, 0.0009296807634783126, 0.0009387443192010042, 0.0009478355740186495, 0.0009569544334143699, 0.0009661008031984072, 0.000975274590505585, 0.0009844757046272344, 0.0009937040551822353, 0.0010029595529453775, 0.0010122421100208332, 0.0010215516407080733, 0.0010308880585245235, 0.0010402512787630604, 0.0010496412186182466, 0.0010590577948562231, 0.0010685009256353193, 0.001077970530649101, 0.0010874665298368762, 0.001096988843883414, 0.0011065373944906453, 0.001116112105025152, 0.0011257128980873626, 0.001135339697763573, 0.001144992428825984, 0.001154671017504939, 0.0011643753893883575, 0.0011741054712363149, 0.0011838611906886552, 0.0011936424761514613, 0.0012034492558426796, 0.0012132814589420869, 0.0012231390160046282, 0.0012330218564383013, 0.0012429299111915858, 0.001252863111523324, 0.0012628213899287782, 0.0012728046777917856, 0.001282812907848379, 0.0012928460131281917, 0.0013029039276639418, 0.0013129865847254871, 0.0013230939184599082, 0.0013332258641501219, 0.001343382355702333, 0.001353563328475577, 0.001363768718614586, 0.0013739984610146123, 0.001384252491854564, 0.0013945307473822114, 0.0014048331646017572, 0.0014151596797456745, 0.0014255102297315739, 0.0014358847521706122, 0.0014462831839020822, 0.0014567054628612866, 0.001467151526226644, 0.001477621311781771, 0.0014881147582109107, 0.0014986318024644808, 0.001509172383006934, 0.0015197364385158485, 0.001530323906898161, 0.0015409347273232068, 0.0015515688371616726, 0.0015622261752856574, 0.0015729066806856188, 0.0015836102915613864, 0.0015943369469604883, 0.00160508658513831, 0.0016158591451612507, 0.001626654565306646, 0.0016374727846291729, 0.0016483137413913099, 0.001659177374610838, 0.0016700636225022711, 0.0016809724240198708, 0.0016919037173082866, 0.0017028574412278582, 0.0017138335345102064, 0.001724831934552474, 0.0017358525803502607, 0.0017468954101640733, 0.0017579603617777371, 0.0017690473736946106, 0.0017801563838244284, 0.001791287330021054, 0.001802440150421615, 0.0018136147831342496, 0.0018248111649273107, 0.0018360292341339458, 0.00184726892833862, 0.001858530185139247, 0.0018698129419541982, 0.0018811171355243574, 0.0018924427036921408, 0.0019037895836868327, 0.0019151577126742733, 0.0019265470277611474, 0.0019379574659999902, 0.0019493889643948591, 0.0019608414599071567, 0.001972314889460781, 0.0019838091899461703, 0.0019953242982241244, 0.0020068601511305504, 0.002018416685482172, 0.00202999383808241, 0.0020415915457267964, 0.00205320974520772, 0.002064848373938726, 0.0020765073679344876, 0.0020881866642059738, 0.002099886199559095, 0.0021116059114053374, 0.0021233457359315054, 0.002135105610116066, 0.002146885471280417, 0.002158685255950081, 0.0021705049015436364, 0.00218234434437306, 0.0021942035219698667, 0.0022060823706909704, 0.0022179808279396943, 0.0022298988302343037, 0.002241836314921194, 0.002253793218796624, 0.002265769478236075, 0.0022777650304873207, 0.0022897798122041273, 0.0023018137599513616, 0.002313866810198447, 0.0023259388993799365, 0.0023380299635680384, 0.0023501399390298394, 0.0023622687618741717, 0.0023744163677198705, 0.002386582692177906, 0.0023987676705464964, 0.0024109712378849284, 0.002423193328989709, 0.00243543387909136, 0.002447692821928101, 0.002459970091799715, 0.002472265622247153, 0.002484579346698696, 0.002496911198020323, 0.0025092611091342408, 0.0025216290116053704, 0.0025340148379965227, 0.002546418519652547, 0.0025588399875089768, 0.002571279172083501, 0.002583736003459039, 0.002596210411253124, 0.0026087023245859996, 0.002621211672060125, 0.002633738382372098, 0.0026462823829563795, 0.0026588436006384757, 0.002671421962933387, 0.0026840173950802085, 0.002696629823681381, 0.0027092591737295866, 0.0027219053697499526, 0.002734568335834238, 0.002747249642104019, 0.002759949184772023, 0.0027726668231296196, 0.002785402414237179, 0.002798155814283777, 0.002810926875684919, 0.0028237154500032917, 0.002836521385253161, 0.0028493445263123576, 0.0028621847164526293, 0.002875041795117076, 0.002887915597191893, 0.002900805968915764, 0.0029137127765787338, 0.002926635894657247, 0.0029395752049523795, 0.0029525305927378554, 0.0029655019466669924, 0.002978489157937654, 0.002991492121304252, 0.0030045107311092683, 0.0030175448850067073, 0.0030305944814585733, 0.003043659420593234, 0.0030567396031486484, 0.0030698349310942876, 0.003082945307269833, 0.003096070636230758, 0.0031092108226904807, 0.0031223657734044618, 0.0031355353954981304, 0.0031487195973137665, 0.003161918289096754, 0.0031751313818304525, 0.0031883587881396036, 0.0032016004226297556, 0.0032148562013001284, 0.003228126042225233, 0.0032414098664585713, 0.003254707596332365, 0.0032680191590030794, 0.00328134448295812, 0.003294683503101331, 0.003308036156122408, 0.003321402386609661, 0.003334782143812425, 0.003348175384555377, 0.003361582075466751, 0.0033750021939885433, 0.0033884357309965996, 0.0034018826970001245, 0.0034153431252564362, 0.003428817081109888, 0.0034423046794970712, 0.0034558061098255506, 0.0034693217022302033, 0.0034828521299353774, 0.003496418124036034, 0.003510015561183698, 0.0035236376663006406, 0.003537281592926014, 0.003550945575147816, 0.0035646283403440292, 0.0035783288925368166, 0.003592046410245624, 0.003605780190869289, 0.003619529617343353, 0.0036332941367157594, 0.0036470732456382817, 0.0036608664801277713, 0.0036746734080963556, 0.0036884936237504278, 0.0037023267432933875, 0.0037161724015637144, 0.0037300302493602886, 0.003743899951283247, 0.003757781183968622, 0.0037716736346286002, 0.003785576999832365, 0.00379949098447875, 0.0038134153009235705, 0.003827349668232995, 0.003841293811540578, 0.0038552474614903056, 0.003869210353751554, 0.0038831822285946335, 0.0038971628305177006, 0.003911151907917514, 0.0039251492127978125, 0.003939154500510168, 0.003953167529523003, 0.003967188061215158, 0.003981215859690957, 0.003995250691614168, 0.0040092923260586465, 0.00402334053437376, 0.004037395090062961, 0.0040514557686740955, 0.004065522347700244, 0.0040795946064899865, 0.004093672326166183, 0.004107755289552428, 0.004121843281106514, 0.004135936086860228, 0.004150033494364911, 0.004164135292642294, 0.004178241272140226, 0.004192351224692813, 0.004206464943484644, 0.004220582223018857, 0.00423470285908869, 0.004248826648752247, 0.004262953390310393, 0.004277082883287384, 0.0042912149284142055, 0.004305349327614403, 0.004319485883992191, 0.004333624401822872, 0.004347764686545242, 0.004361906544756078, 0.004376049784206434, 0.004390194213799818, 0.004404339643592037, 0.004418485884792764, 0.004432632749768663, 0.004446780052048124, 0.004460927606327445, 0.004475075228478576, 0.004489222735558216, 0.004503369945818428, 0.004517516678718577, 0.0045316627549387145, 0.0045458079963943505, 0.004559952226252572, 0.004574095268949628, 0.004588236950209861, 0.004602377097066102, 0.00461651553788154, 0.004630652102373054, 0.0046447866216360895, 0.004658918928171165, 0.004673048855911992, 0.004687176240255334, 0.0047013009180927, 0.00471542272784396, 0.004729541509492973, 0.004743657104625413, 0.004757769356468934, 0.004771878109935874, 0.004785983211668687, 0.004800084510088396, 0.004814181855446372, 0.004828275099879804, 0.004842364097471312, 0.004856448704313229, 0.004870528778577229, 0.004884604180590151, 0.0048986747729170554, 0.004912740420452898, 0.004926800990524642, 0.0049408563530062895, 0.004954906380450331, 0.004968950948240672, 0.004982989934774408, 0.0049970232216818315, 0.005011050694093236, 0.00502507224103605, 0.005039087756460609, 0.005053097140206946, 0.005067100297020693, 0.005081097135509739, 0.005095087567729407, 0.005109071508897824, 0.005123048877157966, 0.005137019593377802, 0.005150983580979136, 0.005164940765787766, 0.0051788910758998885, 0.005192834441561216, 0.005206770795056324, 0.005220700070606373, 0.0052346222042738205, 0.005248537133873029, 0.0052624447988859294, 0.005276345140382035, 0.00529023810094225, 0.005304123624585988, 0.00531800165670121, 0.00533187214397704, 0.005345735034338682, 0.005359590276884367, 0.005373437821824121, 0.005387277620420137, 0.00540110962492861, 0.005414933788542853, 0.005428750065337556, 0.005442558410214051, 0.0054563587788464905, 0.005470151127628795, 0.005483935413622272, 0.005497711594503838, 0.005511479628514709, 0.005525239474409484, 0.005538991091405569, 0.0055527344391327884, 0.005566469477583173, 0.005580196167060798, 0.005593914468131601, 0.005607624341573114, 0.005621325748323991, 0.005635018649433307, 0.005648703006009465, 0.0056623787791687035, 0.005676045929983045, 0.00568970441942764, 0.00570335420832737, 0.005716995257302638, 0.005730627526714198, 0.00574425097660694, 0.005757865566652474, 0.0057714712560904095, 0.005785068003668141, 0.005798655767579028, 0.005812234505398763, 0.0058258041740197565, 0.005839364729583335, 0.005852916127409527, 0.005866458321924184, 0.0058799912665831915, 0.00589351491379344, 0.005907029214830252, 0.0059205341197508905, 0.00593402957730374, 0.005947515534832702, 0.005960991938176306, 0.005974458731560956, 0.0059879158574876615, 0.006001363256611532, 0.006014800867613205, 0.0060282286270612545, 0.006041646469264521, 0.006055054326113104, 0.00606845212690662, 0.006081839798168061, 0.006095217263441363, 0.006108584443070462, 0.00612194125395721, 0.0061352876092951305, 0.006148623418275351, 0.0061619485857604215, 0.006175263011920856, 0.006188566591828171, 0.006201859214996895, 0.006215140764866326, 0.0062284111182107004, 0.006241670144463679, 0.006254917704939484, 0.006268153651928319, 0.00628137782763742, 0.00629459006294061, 0.006307790175887573, 0.006320977969907814, 0.00633415323162114, 0.006347315728132911, 0.006360465203642331, 0.006373601375115715, 0.006386723926656287, 0.006399832502005493, 0.006412926694275654, 0.006426006031413102, 0.006439069954745867, 0.00645211778561327, 0.0064651486697206014, 0.006478161474965106, 0.006491154574763356, 0.006504125260765826, 0.006517066894762612, 0.006529975489003649, 0.006542871908887217, 0.006555756960620535, 0.006568631105975891, 0.0065814946646280325, 0.006594347880386059, 0.006607190946048071, 0.006620024020882513, 0.006632847239943641, 0.006645660717163063, 0.006658464551526419, 0.006671258829670933, 0.006684043626873423, 0.006696819009256659, 0.006709585036682176, 0.006722341759491493, 0.006735089224598097, 0.006747827470836355, 0.006760556534026974, 0.006773276443463936, 0.006785987225440707, 0.006798688901531028, 0.006811381489474023, 0.006824065003837694, 0.006836739455414052, 0.006849404851541197, 0.00686206119698985, 0.006874708492781785, 0.006887346736860085, 0.006899975924920473, 0.006912596048724189, 0.006925207097967515, 0.006937809058709851, 0.006950401914205724, 0.006962985644530446, 0.006975560227189523, 0.006988125636049934, 0.007000681842187103, 0.007013228811370576, 0.007025766507777263, 0.00703829489001337, 0.007050813912117434, 0.00706332352271697, 0.007075823664927766, 0.007088314272494939, 0.007100795268924915, 0.0071132665556149334, 0.0071257280205471295, 0.007138179554193903, 0.007150621048786417, 0.007163052396089596, 0.0071754734889308645, 0.007187884221611382, 0.007200284487210532, 0.007212674180507663, 0.007225053195081724, 0.00723742142467381, 0.007249778797881295, 0.007262126915150088, 0.00727446572884173, 0.007286795189703321, 0.007299115246909521, 0.00731142584921357, 0.007323726941984103, 0.007336018470855352, 0.007348300378773823, 0.0073605726073098865, 0.007372835097325228, 0.007385087787631924, 0.007397330615620857, 0.0074095635172587914, 0.007421786427075148, 0.007433999278151179, 0.007446202002123885, 0.007458394529199393, 0.007470576788984556, 0.007482748708295052, 0.007494910213535477, 0.007507061229311684, 0.007519201679076039, 0.007531331484705349, 0.007543450567175348, 0.007555558845269325, 0.007567656237661645, 0.007579742661021616, 0.007591818030740953, 0.007603882260940945, 0.007615935264577569, 0.007627976953168067, 0.007640007237304595, 0.007652026026353954, 0.007664033228135763, 0.0076760287495107144, 0.007688012496083742, 0.007699984372294726, 0.00771194428144147, 0.007723892126213601, 0.0077358278072542355, 0.007747751224480093, 0.007759662277236879, 0.007771560862945944, 0.007783446878841238, 0.0077953202200603715, 0.007807180781886879, 0.00781902845737602, 0.0078308631396995, 0.007842684720163067, 0.00785449308991131, 0.007866288138803395, 0.007878069754977549, 0.007889837826879333, 0.007901592241442067, 0.007913332884906966, 0.007925059641630152, 0.007936772396485138, 0.007948471032849127, 0.007960155433232736, 0.007971825479289348, 0.007983481051824382, 0.0079951220308044, 0.008006748295365433, 0.008018359723819903, 0.008029956193662187, 0.008041537581574073, 0.008053103763431095, 0.008064654614309318, 0.008076190008491893, 0.008087709819474858, 0.00809921391997224, 0.008110702182466595, 0.008122174477495287, 0.008133630675430601, 0.008145070645983056, 0.008156494258009867, 0.008167901380278779, 0.008179291879156527, 0.008190665621515646, 0.008202022473426183, 0.00821336229984626, 0.008224684964964339, 0.008235990332740426, 0.008247278265596708, 0.008258548625617864, 0.008269801274813934, 0.008281036072791546, 0.008292252879691974, 0.00830345155499082, 0.008314631956659406, 0.008325793942696162, 0.008336937369583719, 0.008348062093838668, 0.008359167970460074, 0.008370254854484362, 0.008381322599423473, 0.008392371058839275, 0.008403400084751789, 0.008414409529250957, 0.008425399242865683, 0.008436369076211366, 0.008447318879090386, 0.00845824849911882, 0.008469157785036542, 0.00848004658365652, 0.008490914741908464, 0.00850176210586595, 0.00851258851945668, 0.0085233938277218, 0.008534177874193166, 0.008544940501200785, 0.008555681551247175, 0.00856640086516706, 0.008577098284008064, 0.008587773647578466, 0.008598426794469012, 0.0086090575635235, 0.008619665792324628, 0.008630251317895864, 0.008640813975501262, 0.0086513536011935, 0.008661870029793938, 0.008672363094241018, 0.008682832628435664, 0.00869327846474493, 0.008703700434277142, 0.008714098368538844, 0.008724472097686078, 0.008734821451251455, 0.008745146257103502, 0.00875544634392861, 0.008765721538901917, 0.008775971668632475, 0.008786196557952654, 0.008796396032625537, 0.008806569916843185, 0.008816718033660811, 0.008826840206168068, 0.008836936256556438, 0.008847006006028012, 0.008857049274525894, 0.008867065882572115, 0.00887705564919097, 0.008887018392705727, 0.008896953929963737, 0.008906862078614157, 0.008916742654703503, 0.008926595473350184, 0.008936420349043949, 0.00894621709617411, 0.008955985527769343, 0.008965725455670846, 0.008975436692383928, 0.0089851190487798, 0.00899477233425468, 0.009004396359321173, 0.009013990932665902, 0.009023555862051554, 0.00903309095452771, 0.009042596017297877, 0.009052070855930622, 0.009061515275233085, 0.009070929080291674, 0.00908031207428335, 0.009089664060279213, 0.009098984840955709, 0.009108274216825155, 0.00911753198993778, 0.009126757960089065, 0.009135951926006991, 0.009145113687329459, 0.009154243040816867, 0.009163339785163208, 0.009172403716450436, 0.009181434630184917, 0.009190432322247423, 0.009199396586255038, 0.009208327217129409, 0.009217224006890963, 0.009226086749328148, 0.00923491523503161, 0.0092437092565677, 0.009252468603266367, 0.00926119306638857, 0.00926988243424434, 0.009278536496663362, 0.009287155041434517, 0.00929573785590217, 0.009304284729434145, 0.009312795447356859, 0.009321269797304183, 0.009329707564530875, 0.009338108533885857, 0.009346472491647733, 0.0093547992211688, 0.00936308850567877, 0.009371340129087025, 0.00937955387390931, 0.009387729521231292, 0.009395866851945434, 0.009403965646348423, 0.00941202568607734, 0.009420046748713681, 0.009428028612245945, 0.009435971053986051, 0.009443873850476715, 0.009451736777443506, 0.009459559609756415, 0.009467342121393735, 0.009475084086239373, 0.009482785275737033, 0.009490445460571442, 0.009498064410168884, 0.009505641894299598, 0.00951317768078238, 0.00952067153625255, 0.009528123226104343, 0.009535532514418828, 0.009542899163848347, 0.009550222935190483, 0.009557503588317117, 0.009564740883288004, 0.009571934576810173, 0.009579084422257555, 0.009586190176460304, 0.009593251590917017, 0.009600268414276096, 0.009607240397579724, 0.009614167284715498, 0.009621048823568165, 0.009627884753765765, 0.009634674818835577, 0.00964141875456503, 0.009648116298296608, 0.009654767183469476, 0.009661371139945566, 0.009667927895797393, 0.009674437179772226, 0.009680898712823209, 0.009687312214500103, 0.00969367740153557, 0.00969999398755344, 0.00970626168287248, 0.009712480194322335, 0.009718649225051714, 0.009724768474313332, 0.009730837637186955, 0.009736856403975746, 0.009742824460508736, 0.009748741491356325, 0.00975460717286, 0.009760421175533895, 0.009766183169230483, 0.009771892812297804, 0.009777549763876391, 0.009783153671097767, 0.009788704176398181, 0.009794200920849047, 0.009799643531359621, 0.009805031629958025, 0.009810364831329759, 0.009815642742174007, 0.00982086496065057, 0.009826031075797794, 0.009831140666836978, 0.009836193301868744, 0.009841188539050104, 0.009846125928109618, 0.009851005000425234, 0.009855825283372147, 0.009860586282535668, 0.009865287492238008, 0.009869928397009751, 0.009874508457860703, 0.009879027121023249, 0.009883483814496644, 0.009887877945402152, 0.00989220890236488, 0.009896476052279269, 0.009900678731365655, 0.00990481626007065, 0.009908887921059584, 0.00991289297046116, 0.009916830632436383, 0.00992070009581355, 0.00992450051054308, 0.00992823098348083, 0.009931890571032127, 0.009935478289134247, 0.0099389930879725, 0.009942433860021705, 0.009945799430105757, 0.009949088546540526, 0.009952299869431644, 0.009955431967053997, 0.009958483294483202, 0.009961452186592225, 0.009964336836954246, 0.00996713527412449, 0.009969845331677938, 0.00997246462214857, 0.009974990492205077, 0.009977419965177807, 0.009979749661817104, 0.009981975719705835, 0.009984093635078168, 0.009986098094876416, 0.009987982659948639, 0.009989739325771645, 0.00999135773333894, 0.00999282373078112, 0.009994116221108552, 0.00999519837948321, 0.009995972702319713, 0.009996415218918578, 0.009996832532141712, 0.009997224536758649, 0.00999759113169919, 0.009997932219701838, 0.009998247703388865, 0.009998537486546761, 0.009998801475409146, 0.009999039575203955, 0.009999251689579217, 0.009999437721595457, 0.009999597567910782, 0.009999731127473913, 0.009999838285399488, 0.009999918917770413, 0.009999972880101364, 0.01, 0.01 ];
  const FLAT_INTERSECTION_VERTICES = [ new Vector2( 0, 0.23 ), new Vector2( 0.28, 0.23 ), new Vector2( 0.28, 0.187 ), new Vector2( 0.31000000000000005, 0.187 ), new Vector2( 0.31000000000000005, 0.285 ), new Vector2( 0.35000000000000003, 0.285 ), new Vector2( 0.35000000000000003, 0.187 ), new Vector2( 0.44784000000000007, 0.19544711111111113 ), new Vector2( 0.5279200000000001, 0.2192168888888889 ), new Vector2( 0.5940800000000003, 0.25595200000000007 ), new Vector2( 0.6501600000000002, 0.3032951111111112 ), new Vector2( 0.7000000000000002, 0.3588888888888889 ), new Vector2( 0.74744, 0.42037599999999997 ), new Vector2( 0.7963200000000001, 0.48539911111111106 ), new Vector2( 0.8504800000000001, 0.5516008888888888 ), new Vector2( 0.9137600000000001, 0.6166240000000001 ), new Vector2( 0.9900000000000002, 0.6781111111111111 ), new Vector2( 1.08304, 0.7337048888888889 ), new Vector2( 1.1967200000000002, 0.781048 ), new Vector2( 1.3348800000000003, 0.8177831111111112 ), new Vector2( 1.5013600000000002, 0.8415528888888888 ), new Vector2( 1.7000000000000002, 0.85 ), new Vector2( 1.7300000000000002, 0.85 ), new Vector2( 1.7300000000000002, 0.82 ), new Vector2( 3.9800000000000004, 0.82 ), new Vector2( 3.9800000000000004, 0.85 ), new Vector2( 4.010000000000001, 0.85 ), new Vector2( 4.152895809383721, 0.8271794713979824 ), new Vector2( 4.22798854525137, 0.8040396711529062 ), new Vector2( 4.306132170971994, 0.7805619443862887 ), new Vector2( 4.3844883991142645, 0.7567256407251051 ), new Vector2( 4.460897976774858, 0.7325077946108405 ), new Vector2( 4.53379367866111, 0.7078827356407251 ), new Vector2( 4.601771512363685, 0.6828216090838128 ), new Vector2( 4.663642384802401, 0.6572917796430003 ), new Vector2( 4.718544302162996, 0.6312560813713379 ), new Vector2( 4.765550257561216, 0.6046718617633107 ), new Vector2( 4.803885429498666, 0.5774897457622157 ), new Vector2( 4.832873739680157, 0.5496520112765728 ), new Vector2( 4.8516911742251505, 0.521090414027616 ), new Vector2( 4.859729467842316, 0.49172321223957816 ), new Vector2( 4.859472845828228, 0.46145099482113416 ), new Vector2( 4.85706843106444, 0.4301506593038921 ), new Vector2( 4.851765922355641, 0.3976664123969497 ), new Vector2( 4.842092726027828, 0.3637957433921271 ), new Vector2( 4.825922307757228, 0.32826639076591413 ), new Vector2( 4.801313921054948, 0.29069591093503844 ), new Vector2( 4.770762669422192, 0.25051414190754634 ), new Vector2( 4.74428805786072, 0.2067948678494956 ), new Vector2( 4.7265874717200385, 0.15781402034283445 ), new Vector2( 4.715519017346967, 0.09941660309923751 ), new Vector2( 4.714949284467778, 0 ), new Vector2( 4.829551708355065, -0.09941660309923751 ), new Vector2( 4.85730373584391, -0.1578140203428346 ), new Vector2( 4.856965436606861, -0.20679486784949574 ), new Vector2( 4.832326961282561, -0.2505141419075462 ), new Vector2( 4.789640582093809, -0.29069591093503844 ), new Vector2( 4.77485466100815, -0.32826639076591413 ), new Vector2( 4.796930336872008, -0.3637957433921271 ), new Vector2( 4.817447837733359, -0.39766641239694983 ), new Vector2( 4.833179248002049, -0.43015065930389224 ), new Vector2( 4.844039672370556, -0.46145099482113405 ), new Vector2( 4.851199380378091, -0.49172321223957816 ), new Vector2( 4.855733910478832, -0.521090414027616 ), new Vector2( 4.85839918578492, -0.5496520112765728 ), new Vector2( 4.85970256565874, -0.5774897457622157 ), new Vector2( 4.859862092954797, -0.6046718617633107 ), new Vector2( 4.853692097513757, -0.6312560813713378 ), new Vector2( 4.838280737052058, -0.6572917796430003 ), new Vector2( 4.813325351753969, -0.6828216090838128 ), new Vector2( 4.778214212420913, -0.7078827356407251 ), new Vector2( 4.731881036298718, -0.7325077946108405 ), new Vector2( 4.6725102493620065, -0.7567256407251052 ), new Vector2( 4.596871517368002, -0.7805619443862886 ), new Vector2( 4.4985047893321015, -0.8040396711529061 ), new Vector2( 4.360649826735966, -0.8271794713979824 ), new Vector2( 4.010000000000001, -0.85 ), new Vector2( 3.9800000000000004, -0.85 ), new Vector2( 3.9800000000000004, -0.82 ), new Vector2( 1.7300000000000002, -0.82 ), new Vector2( 1.7300000000000002, -0.85 ), new Vector2( 1.7000000000000002, -0.85 ), new Vector2( 1.5013600000000002, -0.8415528888888888 ), new Vector2( 1.3348800000000003, -0.8177831111111112 ), new Vector2( 1.1967200000000002, -0.781048 ), new Vector2( 1.0830400000000002, -0.7337048888888889 ), new Vector2( 0.9900000000000002, -0.6781111111111111 ), new Vector2( 0.9137600000000001, -0.6166240000000001 ), new Vector2( 0.8504800000000001, -0.5516008888888888 ), new Vector2( 0.7963200000000001, -0.48539911111111106 ), new Vector2( 0.74744, -0.42037599999999997 ), new Vector2( 0.7000000000000003, -0.358888888888889 ), new Vector2( 0.6501600000000002, -0.3032951111111111 ), new Vector2( 0.59408, -0.255952 ), new Vector2( 0.5279200000000001, -0.21921688888888888 ), new Vector2( 0.44784, -0.19544711111111113 ), new Vector2( 0.35000000000000003, -0.187 ), new Vector2( 0.35000000000000003, -0.285 ), new Vector2( 0.31000000000000005, -0.285 ), new Vector2( 0.31000000000000005, -0.187 ), new Vector2( 0.28, -0.187 ), new Vector2( 0.28, -0.23 ), new Vector2( 0, -0.23 ) ];

  class Bottle extends Mass {
    /**
     * @param {Engine} engine
     * @param {Object} config
     */
    constructor( engine, config ) {
      const vertices = [];
      const volume = 0;

      // TODO
      config = merge( {
        body: engine.createBottle( vertices ),
        shape: Shape.polygon( vertices ),
        volume: volume,
        canRotate: false

        // material
      }, config );

      assert && assert( !config.canRotate );

      super( engine, config );

      // Step information
      this.stepArea = 0;
      this.stepMaximumVolume = 0;
    }

    updateStepInformation() {
      // this.engine.bodyGetStepMatrixTransform( this.body, this.stepMatrix );

      // const xOffset = this.stepMatrix.m02();
      // const yOffset = this.stepMatrix.m12();

      // this.stepX = xOffset;
      // this.stepBottom = yOffset + this.sizeProperty.value.minY;
      // this.stepTop = yOffset + this.sizeProperty.value.maxY;

      // this.stepArea = this.sizeProperty.value.width * this.sizeProperty.value.depth;
      // this.stepMaximumVolume = this.stepArea * this.sizeProperty.value.height;
    }

    /**
     * If there is an intersection with the ray and this mass, the t-value (distance the ray would need to travel to
     * reach the intersection, e.g. ray.position + ray.distance * t === intersectionPoint) will be returned. Otherwise
     * if there is no intersection, null will be returned.
     * @public
     * @override
     *
     * @param {Ray3} ray
     * @param {boolean} isTouch
     * @returns {number|null}
     */
    intersect( ray, isTouch ) {

      // TODO
      return null;
    }

    /**
     * Returns the cumulative displaced volume of this object up to a given y level.
     * @public
     * @override
     *
     * Assumes step information was updated.
     *
     * @param {number} liquidLevel
     * @returns {number}
     */
    getDisplacedArea( liquidLevel ) {
      const bottom = this.stepBottom;
      const top = this.stepTop;

      const ratio = ( liquidLevel - bottom ) / ( top - bottom );

      return 0 * ratio; // TODO
    }

    /**
     * Returns the displaced volume of this object up to a given y level, assuming a y value for the given liquid level.
     * @public
     * @override
     *
     * Assumes step information was updated.
     *
     * @param {number} liquidLevel
     * @returns {number}
     */
    getDisplacedVolume( liquidLevel ) {
      const bottom = this.stepBottom;
      const top = this.stepTop;

      const ratio = ( liquidLevel - bottom ) / ( top - bottom );

      return 0 * ratio; // TODO
    }

    reset() {
      super.reset();
    }

    /**
     * @public
     *
     * @param {Array.<Vector2>} - Four points for a cubic
     * @param {number} t
     * @returns {Vector2}
     */
    static evaluateCubic( controlPoints, t ) {
      const mt = 1 - t;
      const mmm = mt * mt * mt;
      const mmt = 3 * mt * mt * t;
      const mtt = 3 * mt * t * t;
      const ttt = t * t * t;

      return new Vector2(
        controlPoints[ 0 ].x * mmm +
        controlPoints[ 1 ].x * mmt +
        controlPoints[ 2 ].x * mtt +
        controlPoints[ 3 ].x * ttt,
        controlPoints[ 0 ].y * mmm +
        controlPoints[ 1 ].y * mmt +
        controlPoints[ 2 ].y * mtt +
        controlPoints[ 3 ].y * ttt
      );
    }

    /**
     * @public
     *
     * @param {Array.<Vector2>} - Four points for a cubic
     * @param {number} t
     * @returns {Vector2}
     */
    static evaluateCubicDerivative( controlPoints, t ) {
      const mt = 1 - t;

      return new Vector2(
        controlPoints[ 0 ].x * ( -3 * mt * mt ) +
        controlPoints[ 1 ].x * ( 3 * mt * mt - 6 * mt * t ) +
        controlPoints[ 2 ].x * ( 6 * mt * t - 3 * t * t ) +
        controlPoints[ 3 ].x * ( 3 * t * t ),
        controlPoints[ 0 ].y * ( -3 * mt * mt ) +
        controlPoints[ 1 ].y * ( 3 * mt * mt - 6 * mt * t ) +
        controlPoints[ 2 ].y * ( 6 * mt * t - 3 * t * t ) +
        controlPoints[ 3 ].y * ( 3 * t * t )
      );
    }

    /**
     * Given control points for a parametric cubic bezier, finds the parametric value for the curve that will have the
     * defined radius.
     * @public
     *
     * @param {Array.<Vector2>} controlPoints
     * @param {number} r
     * @returns {number}
     */
    static getParametricFromRadius( controlPoints, r ) {
      const r0 = controlPoints[ 0 ].y;
      const r1 = controlPoints[ 1 ].y;
      const r2 = controlPoints[ 2 ].y;
      const r3 = controlPoints[ 3 ].y;

      const roots = Util.solveCubicRootsReal(
        -r0 + 3 * r1 - 3 * r2 + r3,
        3 * r0 - 6 * r1 + 3 * r2,
        -3 * r0 + 3 * r1,
        r0 - r
      ).filter( t => t >= 0 && t <= 1 );

      return roots[ 0 ];
    }

    static getTaperParametricProfilePoint( t ) {
      return Bottle.evaluateCubic( TAPER_CONTROL_POINTS, t );
    }

    static getTaperParametricDerivative( t ) {
      return Bottle.evaluateCubicDerivative( TAPER_CONTROL_POINTS, t );
    }

    static getBaseFirstTipParametricProfilePoint( t ) {
      return Bottle.evaluateCubic( BASE_FIRST_TIP_CONTROL_POINTS, t );
    }

    static getBaseSecondTipParametricProfilePoint( t ) {
      return Bottle.evaluateCubic( BASE_SECOND_TIP_CONTROL_POINTS, t );
    }

    static getBaseSaddleParametricProfilePoint( t ) {
      return Bottle.evaluateCubic( BASE_SADDLE_CONTROL_POINTS, t );
    }

    static getTaperParametricFromRadius( r ) {
      return Bottle.getParametricFromRadius( TAPER_CONTROL_POINTS, r );
    }

    static getBaseFirstTipParametricFromRadius( r ) {
      return Bottle.getParametricFromRadius( BASE_FIRST_TIP_CONTROL_POINTS, r );
    }

    static getBaseSecondTipParametricFromRadius( r ) {
      return Bottle.getParametricFromRadius( BASE_SECOND_TIP_CONTROL_POINTS, r );
    }

    static getBaseSaddleParametricFromRadius( r ) {
      return Bottle.getParametricFromRadius( BASE_SADDLE_CONTROL_POINTS, r );
    }

    static getBasePoint( y, z ) {
      const r = Math.sqrt( y * y + z * z );
      const theta = Math.atan2( z, y ); // angled so we're symmetric?

      const saddlePoint = Bottle.getBaseSaddleParametricProfilePoint( Bottle.getBaseSaddleParametricFromRadius( r ) );
      const tipPoint = r > BASE_TIP_RADIUS ?
                   Bottle.getBaseFirstTipParametricProfilePoint( Bottle.getBaseFirstTipParametricFromRadius( r ) ) :
                   Bottle.getBaseSecondTipParametricProfilePoint( Bottle.getBaseSecondTipParametricFromRadius( r ) );

      const ratio = Math.cos( theta * 5 ) * 0.5 + 0.5;

      return new Vector3(
        tipPoint.x + ratio * ( saddlePoint.x - tipPoint.x ),
        y,
        z
      );
    }

    static getMainBottleCrossSectionTriangles( y, precisionMultiplier = 1 ) {
      const triangles = [];
      const absY = Math.abs( y );

      const radial = r => r * Math.sqrt( 1 - Math.pow( y / r, 2 ) );
      const mirroredQuad = ( x0, z0, x1, z1 ) => {
        const a = new Vector2( x0, z0 );
        const b = new Vector2( x1, z1 );
        const c = new Vector2( x1, -z1 );
        const d = new Vector2( x0, -z0 );

        triangles.push(
          a, b, c,
          a, c, d
        );
      };
      const approximateProfile = profileVectors => {
        _.range( 0, profileVectors.length - 1 ).forEach( i => {
          const a = profileVectors[ i ];
          const b = profileVectors[ i + 1 ];

          if ( a.y > absY && b.y > absY ) {
            mirroredQuad( a.x, radial( a.y ), b.x, radial( b.y ) );
          }
          else if ( a.y > absY || b.y > absY ) {
            const ratio = ( absY - a.y ) / ( b.y - a.y );
            const x = a.x + ratio * ( b.y - a.y );

            if ( a.y > absY ) {
              triangles.push(
                new Vector2( a.x, radial( a.y ) ),
                new Vector2( x, 0 ),
                new Vector2( a.x, -radial( a.y ) )
              );
            }
            else {
              triangles.push(
                new Vector2( x, 0 ),
                new Vector2( b.x, radial( b.y ) ),
                new Vector2( b.x, -radial( b.y ) )
              );
            }
          }
        } );
      };

      // section under cap
      approximateProfile( [
        new Vector2( CAP_CORNER_RADIUS, NECK_RADIUS ),
        new Vector2( CAP_CORNER_RADIUS + CAP_BODY_LENGTH + GAP_LENGTH, NECK_RADIUS )
      ] );

      // lip
      const cornerSegmentCount = 12 * precisionMultiplier;
      approximateProfile( _.range( 0, ( cornerSegmentCount * 2 ) + 1 ).map( i => {
        const theta = Math.PI * ( 1 - i / ( cornerSegmentCount * 2 ) );
        return new Vector2(
          LIP_START + LIP_CORNER_RADIUS * ( 1 + Math.cos( theta ) ),
          LIP_RADIUS + LIP_CORNER_RADIUS * ( -1 + Math.sin( theta ) )
        );
      } ) );

      // taper
      const taperSegmentCount = 60 * precisionMultiplier;
      approximateProfile( _.range( 0, taperSegmentCount + 1 ).map( i => Bottle.getTaperParametricProfilePoint( i / taperSegmentCount ) ) );

      // body left corner
      approximateProfile( _.range( 0, cornerSegmentCount + 1 ).map( i => {
        const theta = 0.5 * Math.PI * ( 1 - i / cornerSegmentCount );
        return new Vector2(
          TAPER_END + BODY_CORNER_RADIUS * Math.cos( theta ),
          BODY_RADIUS + BODY_CORNER_RADIUS * Math.sin( theta )
        );
      } ) );

      // body
      approximateProfile( [
        new Vector2( BODY_START, BODY_RADIUS ),
        new Vector2( BODY_END, BODY_RADIUS )
      ] );

      // body right corner
      approximateProfile( _.range( 0, cornerSegmentCount + 1 ).map( i => {
        const theta = 0.5 * Math.PI * ( 2 - i / cornerSegmentCount );
        return new Vector2(
          BASE_START + BODY_CORNER_RADIUS * Math.cos( theta ),
          BODY_RADIUS + BODY_CORNER_RADIUS * Math.sin( theta )
        );
      } ) );

      // base
      const baseSegmentCount = 60 * precisionMultiplier;
      if ( absY < FULL_RADIUS ) {
        const maxZ = radial( FULL_RADIUS );
        const zValues = _.range( 1, baseSegmentCount ).map( i => {
          const unit = 1 - 2 * ( i / baseSegmentCount );
          return maxZ * ( unit > 0 ? 1 : -1 ) * Math.pow( Math.abs( unit ), 2 / 3 );
        } );

        // x,z
        const points = [
          new Vector2( BASE_START, maxZ ),
          ...zValues.map( z => {
            const basePoint = Bottle.getBasePoint( y, z );
            return new Vector2( basePoint.x, basePoint.z );
          } ),
          new Vector2( BASE_START, -maxZ )
        ];

        const center = new Vector2( BASE_START, 0 );
        _.range( 0, points.length - 1 ).forEach( i => {
          triangles.push(
            center, points[ i ], points[ i + 1 ]
          );
        } );
      }

      return triangles;
    }

    /**
     * Returns the cross-sectional area taken up by a selection of triangles in 2d.
     * @public
     *
     * @param {Array.<Vector2>} - Every section of three vertices represents a 2d triangle
     * @returns {number}
     */
    static getCrossSectionArea( triangles ) {
      let area = 0;
      _.range( 0, triangles.length, 3 ).forEach( i => {
        area += Util.triangleArea(
          triangles[ i ],
          triangles[ i + 1 ],
          triangles[ i + 2 ]
        );
      } );
      return area;
    }

    static computeBottleData( samples = 1000, accuracyMultiplier = 100 ) {
      const desiredVolume = 0.01;

      const multiplier = FULL_RADIUS * 2;
      let sum = 0;
      const sliceAreas = [];
      _.range( 0, samples ).forEach( i => {
        // unit area times the multiplier
        const y = ( i / ( samples - 1 ) - 0.5 ) * multiplier;
        const area = Bottle.getCrossSectionArea( Bottle.getMainBottleCrossSectionTriangles( y, accuracyMultiplier ) );
        sliceAreas.push( area );
        sum += area;
      } );
      const originalVolume = sum / samples * multiplier;
      const tenLiterMultiplier = Math.pow( originalVolume / desiredVolume, -1 / 3 );

      const actualAreas = sliceAreas.map( area => tenLiterMultiplier * tenLiterMultiplier * area );
      const actualCumulativeAreas = [];
      let cumulativeArea = 0;
      actualAreas.forEach( area => {
        cumulativeArea += area / samples * multiplier * tenLiterMultiplier;
        // sanity work due to rounding
        actualCumulativeAreas.push( Math.min( desiredVolume, cumulativeArea ) );
      } );

      // Somewhat simplified
      const intersectionTaperSegments = 15;
      const baseSegments = 50;
      const computationLimit = 300;
      const flatIntersectionVertices = [
        new Vector2( 0, CAP_RADIUS ),
        new Vector2( CAP_LENGTH, CAP_RADIUS ),
        new Vector2( CAP_LENGTH, NECK_RADIUS ),
        new Vector2( LIP_START, NECK_RADIUS ),
        new Vector2( LIP_START, LIP_RADIUS ),
        new Vector2( LIP_END, LIP_RADIUS ),

        ..._.range( 0, intersectionTaperSegments + 1 ).map( i => Bottle.getTaperParametricProfilePoint( i / intersectionTaperSegments ) ),

        new Vector2( BODY_START, FULL_RADIUS ),
        new Vector2( BODY_START, BODY_RADIUS ),
        new Vector2( BODY_END, BODY_RADIUS ),
        new Vector2( BODY_END, FULL_RADIUS ),
        new Vector2( BASE_START, FULL_RADIUS ),

        // compute the maximum X values for each Y (over the range of Z values) for the base
        ..._.range( 1, baseSegments ).map( i => {
          const unit = 1 - 2 * ( i / baseSegments );
          const y = FULL_RADIUS * ( unit > 0 ? 1 : -1 ) * Math.pow( Math.abs( unit ), 2 / 3 );
          let maxX = BASE_START;
          _.range( -FULL_RADIUS, FULL_RADIUS, 2 * FULL_RADIUS / computationLimit ).forEach( z => {
            if ( Math.sqrt( y * y + z * z ) < FULL_RADIUS ) {
              maxX = Math.max( maxX, Bottle.getBasePoint( y, z ).x );
            }
          } );
          return new Vector2( maxX, y );
        } ),

        new Vector2( BASE_START, -FULL_RADIUS ),
        new Vector2( BODY_END, -FULL_RADIUS ),
        new Vector2( BODY_END, -BODY_RADIUS ),
        new Vector2( BODY_START, -BODY_RADIUS ),
        new Vector2( BODY_START, -FULL_RADIUS ),

        ..._.range( 0, intersectionTaperSegments + 1 ).map( i => {
          const point = Bottle.getTaperParametricProfilePoint( 1 - i / intersectionTaperSegments );
          return new Vector2( point.x, -point.y );
        } ),

        new Vector2( LIP_END, -LIP_RADIUS ),
        new Vector2( LIP_START, -LIP_RADIUS ),
        new Vector2( LIP_START, -NECK_RADIUS ),
        new Vector2( CAP_LENGTH, -NECK_RADIUS ),
        new Vector2( CAP_LENGTH, -CAP_RADIUS ),
        new Vector2( 0, -CAP_RADIUS )
      ];

      return `
  // NOTE: machine generated by copy( phet.densityBuoyancyCommon.Bottle.computeBottleData() );
  // If any parameters about the bottle shape changes, this should be recomputed.
  const TEN_LITER_SCALE_MULTIPLIER = ${tenLiterMultiplier};
  const TEN_LITER_DISPLACED_AREAS = [ ${actualAreas.join( ', ' )} ];
  const TEN_LITER_DISPLACED_VOLUMES = [ ${actualCumulativeAreas.join( ', ' )} ];
  const FLAT_INTERSECTION_VERTICES = [ ${flatIntersectionVertices.map( v => `new Vector2( ${v.x}, ${v.y} )` ).join( ', ' )} ];
`;
    }

    /**
     * Returns a list of points in (x,r) that is the cross-section profile of the cap.
     * @public
     *
     * @returns {Array.<Vector2>}
     */
    static getCapProfile() {
      return [
        new Vector2( 0, 0 ),
        ..._.range( 0, CORNER_SEGMENTS ).map( i => {
          const theta = Math.PI / 2 * i / CORNER_SEGMENTS;
          return new Vector2(
            CAP_CORNER_RADIUS * ( 1 - Math.cos( theta ) ),
            CAP_RADIUS + CAP_CORNER_RADIUS * ( -1 + Math.sin( theta ) )
          );
        } ),
        new Vector2( CAP_CORNER_RADIUS, CAP_RADIUS ),
        new Vector2( CAP_CORNER_RADIUS + CAP_BODY_LENGTH, CAP_RADIUS ),
        new Vector2( CAP_CORNER_RADIUS + CAP_BODY_LENGTH, NECK_RADIUS )
      ];
    }

    static getLipToBodyProfile() {
      return [
        new Vector2( CAP_CORNER_RADIUS + CAP_BODY_LENGTH + GAP_LENGTH, NECK_RADIUS ),
        ..._.range( 0, CORNER_SEGMENTS * 2 ).map( i => {
          const theta = Math.PI - Math.PI / 2 * i / CORNER_SEGMENTS;
          return new Vector2(
            LIP_START + LIP_CORNER_RADIUS * ( 1 + Math.cos( theta ) ),
            LIP_RADIUS + LIP_CORNER_RADIUS * ( -1 + Math.sin( theta ) )
          );
        } ),
        new Vector2( LIP_END, LIP_RADIUS - LIP_CORNER_RADIUS ),
        new Vector2( LIP_END, NECK_RADIUS ),
        ..._.range( 1, TAPER_SEGMENTS ).map( i => Bottle.getTaperParametricProfilePoint( i / TAPER_SEGMENTS ) ),
        ..._.range( 0, CORNER_SEGMENTS ).map( i => {
          const theta = Math.PI / 2 * ( 1 - i / CORNER_SEGMENTS );
          return new Vector2(
            TAPER_END + BODY_CORNER_RADIUS * Math.cos( theta ),
            BODY_RADIUS + BODY_CORNER_RADIUS * Math.sin( theta )
          );
        } ),
        new Vector2( BODY_START, BODY_RADIUS ),
        ..._.range( 0, CORNER_SEGMENTS ).map( i => {
          const theta = Math.PI / 2 * i / CORNER_SEGMENTS;
          return new Vector2(
            BODY_END + BODY_CORNER_RADIUS * ( 1 - Math.cos( theta ) ),
            BODY_RADIUS + BODY_CORNER_RADIUS * Math.sin( theta )
          );
        } ),
        new Vector2( BODY_END + BODY_CORNER_RADIUS, FULL_RADIUS )
      ];
    }

    /**
     * Returns a list of points in (x,r) that is the cross-section profile of the non-base portion of the bottle.
     * @public
     *
     * @returns {Array.<Vector2>}
     */
    static getMainBottleProfile() {
      return [
        new Vector2( CAP_CORNER_RADIUS, NECK_RADIUS ),
        ...Bottle.getLipToBodyProfile()
      ];
    }

    static getMainFlatIntersectionProfile() {
      return [
        ...Bottle.getCapProfile(),
        ...Bottle.getLipToBodyProfile()
      ];
    }

    static xToU( x ) {
      return x / BASE_TIP;
    }

    // TODO: What is the most efficient to have the value of V?
    static yToV( y ) {
      return y / ( 2 * FULL_RADIUS ) + 0.5;
    }

    static quadRing( positions, normals, uvs, radialSegments, x0, r0, x1, r1, nx0, nr0, nx1, nr1 ) {
      _.range( 0, radialSegments ).forEach( i => {
        const theta0 = 2 * Math.PI * i / radialSegments;
        const theta1 = 2 * Math.PI * ( i + 1 ) / radialSegments;

        const sin0 = Math.sin( theta0 );
        const sin1 = Math.sin( theta1 );
        const cos0 = Math.cos( theta0 );
        const cos1 = Math.cos( theta1 );

        positions.push(
          x0, r0 * sin0, r0 * cos0,
          x1, r1 * sin0, r1 * cos0,
          x1, r1 * sin1, r1 * cos1,
          x0, r0 * sin0, r0 * cos0,
          x1, r1 * sin1, r1 * cos1,
          x0, r0 * sin1, r0 * cos1
        );

        normals.push(
          nx0, nr0 * sin0, nr0 * cos0,
          nx1, nr1 * sin0, nr1 * cos0,
          nx1, nr1 * sin1, nr1 * cos1,
          nx0, nr0 * sin0, nr0 * cos0,
          nx1, nr1 * sin1, nr1 * cos1,
          nx0, nr0 * sin1, nr0 * cos1
        );

        uvs.push(
          Bottle.xToU( x0 ), Bottle.yToV( r0 * sin0 ),
          Bottle.xToU( x1 ), Bottle.yToV( r1 * sin0 ),
          Bottle.xToU( x1 ), Bottle.yToV( r1 * sin1 ),
          Bottle.xToU( x0 ), Bottle.yToV( r0 * sin0 ),
          Bottle.xToU( x1 ), Bottle.yToV( r1 * sin1 ),
          Bottle.xToU( x0 ), Bottle.yToV( r0 * sin1 )
        );
      } );
    }

    static roundedCornerRing( positions, normals, uvs, radialSegments, cornerSegments, startTheta, endTheta, x, r, cornerRadius ) {
      _.range( 0, cornerSegments ).forEach( i => {
        const theta0 = startTheta + ( i / cornerSegments ) * ( endTheta - startTheta );
        const theta1 = startTheta + ( ( i + 1 ) / cornerSegments ) * ( endTheta - startTheta );

        const nx0 = Math.cos( theta0 );
        const nr0 = Math.sin( theta0 );
        const nx1 = Math.cos( theta1 );
        const nr1 = Math.sin( theta1 );
        const x0 = x + cornerRadius * nx0;
        const r0 = r + cornerRadius * nr0;
        const x1 = x + cornerRadius * nx1;
        const r1 = r + cornerRadius * nr1;

        Bottle.quadRing( positions, normals, uvs, radialSegments, x0, r0, x1, r1, nx0, nr0, nx1, nr1 );
      } );
    }

    static getPrimaryGeometry() {
      const radialSegments = 64;
      const cornerSegments = 6;
      const taperSegments = 30;
      const baseSegments = 40;

      const positions = [];
      const normals = [];
      const uvs = []; // x / CAP_LENGTH, theta/2pi (approximately) in case we want to texture the cap

      // the under-cap portion
      Bottle.quadRing(
        positions, normals, uvs, radialSegments,
        CAP_CORNER_RADIUS, NECK_RADIUS,
        LIP_START, NECK_RADIUS,
        0, 1,
        0, 1
      );

      // top surface of the lip
      Bottle.quadRing(
        positions, normals, uvs, radialSegments,
        LIP_START, NECK_RADIUS,
        LIP_START, LIP_RADIUS - LIP_CORNER_RADIUS,
        -1, 0,
        -1, 0
      );

      // lip corner
      Bottle.roundedCornerRing(
        positions, normals, uvs, radialSegments, 2 * cornerSegments,
        Math.PI, 0, LIP_START + LIP_CORNER_RADIUS, LIP_RADIUS - LIP_CORNER_RADIUS, LIP_CORNER_RADIUS
      );

      // bottom surface of the lip
      Bottle.quadRing(
        positions, normals, uvs, radialSegments,
        LIP_END, LIP_RADIUS - LIP_CORNER_RADIUS,
        LIP_END, NECK_RADIUS,
        1, 0,
        1, 0
      );

      const bottlePoints = _.range( 0, taperSegments + 1 ).map( i => Bottle.getTaperParametricProfilePoint( i / taperSegments ) );
      const bottleTangents = _.range( 0, taperSegments + 1 ).map( i => Bottle.getTaperParametricDerivative( i / taperSegments ).normalized() );
      _.range( 0, taperSegments ).forEach( i => {
        Bottle.quadRing(
          positions, normals, uvs, radialSegments,
          bottlePoints[ i ].x, bottlePoints[ i ].y,
          bottlePoints[ i + 1 ].x, bottlePoints[ i + 1 ].y,
          -bottleTangents[ i ].y, bottleTangents[ i ].x,
          -bottleTangents[ i + 1 ].y, bottleTangents[ i + 1 ].x
        );
      } );

      // body start corner
      Bottle.roundedCornerRing(
        positions, normals, uvs, radialSegments, cornerSegments,
        0.5 * Math.PI, 0, TAPER_END, BODY_RADIUS, BODY_CORNER_RADIUS
      );

      // the under-cap portion
      Bottle.quadRing(
        positions, normals, uvs, radialSegments,
        BODY_START, BODY_RADIUS,
        BODY_END, BODY_RADIUS,
        0, 1,
        0, 1
      );

      // body end corner
      Bottle.roundedCornerRing(
        positions, normals, uvs, radialSegments, cornerSegments,
        Math.PI, 0.5 * Math.PI, BASE_START, BODY_RADIUS, BODY_CORNER_RADIUS
      );


      const baseRValues = _.range( 1, baseSegments ).map( i => FULL_RADIUS * Math.pow( ( 1 - i / baseSegments ), 2 / 3 ) );

      // {Array.<Array.<Vector3>>}
      const baseMesh = _.range( 0, radialSegments ).map( i => {
        const theta = 2 * Math.PI * i / radialSegments;

        return [
          new Vector3( BASE_START, FULL_RADIUS * Math.sin( theta ), FULL_RADIUS * Math.cos( theta ) ),
          ...baseRValues.map( r => Bottle.getBasePoint( r * Math.sin( theta ), r * Math.cos( theta ) ) ),
          new Vector3( BASE_SADDLE, 0, 0 )
        ];
      } );
      const baseMeshNormals = baseMesh.map( ( positions, i ) => {
        return positions.map( ( position, j ) => {
          if ( j === 0 ) {
            return new Vector3( 0, position.y, position.z ).normalize();
          }
          else if ( j === positions.length - 1 ) {
            return Vector3.X_UNIT;
          }
          else {
            const west = positions[ j - 1 ].minus( position );
            const east = positions[ j + 1 ].minus( position );
            const north = baseMesh[ Util.moduloBetweenDown( i - 1, 0, radialSegments ) ][ j ].minus( position );
            const south = baseMesh[ Util.moduloBetweenDown( i + 1, 0, radialSegments ) ][ j ].minus( position );

            // TODO: check sign
            const cumulativeNormal = new Vector3( 0, 0, 0 );
            cumulativeNormal.add( north.cross( east ).normalize() );
            cumulativeNormal.add( east.cross( south ).normalize() );
            cumulativeNormal.add( south.cross( west ).normalize() );
            cumulativeNormal.add( west.cross( north ).normalize() );
            cumulativeNormal.normalize();
            return cumulativeNormal;
          }
        } );
      } );

      _.range( 0, radialSegments ).map( iRadial => {
        _.range( 0, baseSegments ).map( iBase => {
          const radial0 = iRadial;
          const radial1 = Util.moduloBetweenDown( iRadial + 1, 0, radialSegments );
          const base0 = iBase;
          const base1 = iBase + 1;

          const p0 = baseMesh[ radial0 ][ base0 ];
          const p1 = baseMesh[ radial0 ][ base1 ];
          const p2 = baseMesh[ radial1 ][ base1 ];
          const p3 = baseMesh[ radial1 ][ base0 ];

          const n0 = baseMeshNormals[ radial0 ][ base0 ];
          const n1 = baseMeshNormals[ radial0 ][ base1 ];
          const n2 = baseMeshNormals[ radial1 ][ base1 ];
          const n3 = baseMeshNormals[ radial1 ][ base0 ];

          positions.push(
            p0.x, p0.y, p0.z,
            p1.x, p1.y, p1.z,
            p2.x, p2.y, p2.z,
            p0.x, p0.y, p0.z,
            p2.x, p2.y, p2.z,
            p3.x, p3.y, p3.z
          );

          normals.push(
            n0.x, n0.y, n0.z,
            n1.x, n1.y, n1.z,
            n2.x, n2.y, n2.z,
            n0.x, n0.y, n0.z,
            n2.x, n2.y, n2.z,
            n3.x, n3.y, n3.z
          );

          uvs.push(
            Bottle.xToU( p0.x ), Bottle.yToV( p0.y ),
            Bottle.xToU( p1.x ), Bottle.yToV( p1.y ),
            Bottle.xToU( p2.x ), Bottle.yToV( p2.y ),
            Bottle.xToU( p0.x ), Bottle.yToV( p0.y ),
            Bottle.xToU( p2.x ), Bottle.yToV( p2.y ),
            Bottle.xToU( p3.x ), Bottle.yToV( p3.y )
          );
        } );
      } );

      const bottleGeometry = new THREE.BufferGeometry();
      bottleGeometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( positions.map( p => p * TEN_LITER_SCALE_MULTIPLIER ) ), 3 ) );
      bottleGeometry.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( normals ), 3 ) );
      bottleGeometry.addAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( uvs ), 2 ) );
      return bottleGeometry;
    }

    /**
     * Returns the model-coordinate THREE.BufferGeometry representing the bottle cap.
     * @public
     *
     * @returns {THREE.BufferGeometry}
     */
    static getCapGeometry() {
      const radialSegments = 64;
      const cornerSegments = 6;

      const positions = [];
      const normals = [];
      const uvs = []; // x / CAP_LENGTH, theta/2pi (approximately) in case we want to texture the cap

      // The top of the cap
      _.range( 0, radialSegments ).forEach( i => {
        const theta0 = 2 * Math.PI * i / radialSegments;
        const theta1 = 2 * Math.PI * ( i + 1 ) / radialSegments;

        const y0 = ( CAP_RADIUS - CAP_CORNER_RADIUS ) * Math.sin( theta0 );
        const y1 = ( CAP_RADIUS - CAP_CORNER_RADIUS ) * Math.sin( theta1 );
        const z0 = ( CAP_RADIUS - CAP_CORNER_RADIUS ) * Math.cos( theta0 );
        const z1 = ( CAP_RADIUS - CAP_CORNER_RADIUS ) * Math.cos( theta1 );

        // triangle fan for the top of the cap
        positions.push(
          0, 0, 0,
          0, y0, z0,
          0, y1, z1
        );
        normals.push(
          -1, 0, 0,
          -1, 0, 0,
          -1, 0, 0
        );
        uvs.push(
          0, 0,
          0, Bottle.yToV( y0 ),
          0, Bottle.yToV( y1 )
        );
      } );

      // corner
      Bottle.roundedCornerRing(
        positions, normals, uvs, radialSegments, cornerSegments,
        Math.PI, 0.5 * Math.PI, CAP_CORNER_RADIUS, CAP_RADIUS - CAP_CORNER_RADIUS, CAP_CORNER_RADIUS
      );

      // main outside face
      Bottle.quadRing(
        positions, normals, uvs, radialSegments,
        CAP_CORNER_RADIUS, CAP_RADIUS,
        CAP_CORNER_RADIUS + CAP_BODY_LENGTH, CAP_RADIUS,
        0, 1,
        0, 1
      );

      // lip underneath
      Bottle.quadRing(
        positions, normals, uvs, radialSegments,
        CAP_CORNER_RADIUS + CAP_BODY_LENGTH, CAP_RADIUS,
        CAP_CORNER_RADIUS + CAP_BODY_LENGTH, NECK_RADIUS,
        1, 0,
        1, 0
      );

      const capGeometry = new THREE.BufferGeometry();
      capGeometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( positions.map( p => p * TEN_LITER_SCALE_MULTIPLIER ) ), 3 ) );
      capGeometry.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( normals ), 3 ) );
      capGeometry.addAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( uvs ), 2 ) );
      return capGeometry;
    }

    static getDebugCanvas() {
      const canvas = document.createElement( 'canvas' );
      const context = canvas.getContext( '2d' );

      const width = 800;
      const height = 400;

      const pixelRatio = window.devicePixelRatio || 1;
      canvas.width = width * pixelRatio;
      canvas.height = height * pixelRatio;
      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
      context.scale( pixelRatio, pixelRatio );

      const scale = width / 5;

      const mapX = x => ( x + 0.07 ) * scale;
      const mapY = y => -y * scale + height / 2;

      context.strokeStyle = 'red';
      context.beginPath();
      const capProfile = Bottle.getCapProfile();
      capProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( p.y ) ) );
      context.stroke();
      context.beginPath();
      capProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( -p.y ) ) );
      context.stroke();

      context.strokeStyle = 'blue';
      context.beginPath();
      const mainBottleProfile = Bottle.getMainBottleProfile();
      mainBottleProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( p.y ) ) );
      context.stroke();
      context.beginPath();
      mainBottleProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( -p.y ) ) );
      context.stroke();

      context.strokeStyle = 'green';
      context.beginPath();
      const baseSaddleProfile = _.range( 0, BASE_SEGMENTS + 1 ).map( i => Bottle.getBaseSaddleParametricProfilePoint( i / BASE_SEGMENTS ) );
      baseSaddleProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( p.y ) ) );
      context.stroke();
      context.beginPath();
      baseSaddleProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( -p.y ) ) );
      context.stroke();

      context.strokeStyle = 'magenta';
      context.beginPath();
      // TODO: figure out segments improvement
      const baseTipProfile = [
        ..._.range( 0, BASE_SEGMENTS + 1 ).map( i => Bottle.getBaseFirstTipParametricProfilePoint( i / BASE_SEGMENTS ) ),
        ..._.range( 1, BASE_SEGMENTS + 1 ).map( i => Bottle.getBaseSecondTipParametricProfilePoint( i / BASE_SEGMENTS ) )
      ];
      baseTipProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( p.y ) ) );
      context.stroke();
      context.beginPath();
      baseTipProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( -p.y ) ) );
      context.stroke();

      const crossSectionTriangles = Bottle.getMainBottleCrossSectionTriangles( 0, 5 );
      _.range( 0, crossSectionTriangles.length, 3 ).forEach( i => {
        context.beginPath();
        context.moveTo( mapX( crossSectionTriangles[ i ].x ), mapY( crossSectionTriangles[ i ].y ) );
        context.lineTo( mapX( crossSectionTriangles[ i + 1 ].x ), mapY( crossSectionTriangles[ i + 1 ].y ) );
        context.lineTo( mapX( crossSectionTriangles[ i + 2 ].x ), mapY( crossSectionTriangles[ i + 2 ].y ) );
        context.closePath();
        context.fillStyle = '#aaa';
        context.fill();
        context.lineWidth = 0.2;
        context.strokeStyle = 'rgba(0,0,0,0.2)';
        context.stroke();
      } );

      context.lineWidth = 1;
      context.strokeStyle = 'brown';
      context.beginPath();
      Bottle.FLAT_INTERSECTION_VERTICES.forEach( p => context.lineTo( mapX( p.x ), mapY( p.y ) ) );
      context.closePath();
      context.stroke();

      while ( document.body.childNodes[ 0 ] ) {
        document.body.removeChild( document.body.childNodes[ 0 ] );
      }
      document.body.appendChild( canvas );
      document.body.style.background = 'white';

      return canvas;
    }
  }

  // TODO: things to construct the 3D shape
  // TODO: use the cross-sectional to construct 2d liquid surfaces contained inside

  // @public {number} - The number to scale the original values by to get a 10L-volume bottle
  Bottle.TEN_LITER_SCALE_MULTIPLIER = TEN_LITER_SCALE_MULTIPLIER;

  // @public {number} - The maximum bounding radius for the 10L-volume bottle
  Bottle.MAX_RADIUS = FULL_RADIUS * TEN_LITER_SCALE_MULTIPLIER;

  // @public {number} - The maximum length for the 10L-volume bottle
  Bottle.MAX_LENGTH = BASE_TIP * TEN_LITER_SCALE_MULTIPLIER;

  // @public {Array.<number>} - From the bottom to top, cross-sectional area and cumulative (displaced) volume
  Bottle.TEN_LITER_DISPLACED_AREAS = TEN_LITER_DISPLACED_AREAS;
  Bottle.TEN_LITER_DISPLACED_VOLUMES = TEN_LITER_DISPLACED_VOLUMES;

  // @public {Array.<Vector2>}
  Bottle.FLAT_INTERSECTION_VERTICES = FLAT_INTERSECTION_VERTICES;

  return densityBuoyancyCommon.register( 'Bottle', Bottle );
} );
